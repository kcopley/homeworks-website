<?phpinclude_once "includes.php";GenerateConsignerSearch()->Render();$gap = new BR();$gap->Render();global $wpdb;switch (page_action::GetAction()) {	case action_types::$search_consigner:	    Consigner::StoreQuery();		Consigner::Search()->Render();		break;    case action_types::$update_consigner:        Consigner::Update(selection::GetConsigner());        Consigner::SelectConsigner(selection::GetConsigner())->Render();        break;    case action_types::$add_consigner:        $consigner_id = Consigner::Add();        Consigner::SelectConsigner(selection::GetConsigner())->Render();        break;    case action_types::$remove_consigner:        consigner_properties::remove_consigner(selection::GetConsigner());        search_consigners()->Render();        break;    case action_types::$search_books:        $_REQUEST[consigner_request::$search_books] = true;        select_consigner(selection::GetConsigner())->Render();        break;    case action_types::$select_consigner:        Consigner::SelectConsigner(selection::GetConsigner())->Render();        break;    case action_types::$add_book_to_consigner:        consigner_properties::add_book(selection::GetConsigner(), selection::GetBook());        select_consigner(selection::GetConsigner())->Render();        break;    case action_types::$remove_book_from_consigner:        consigner_properties::remove_book(selection::GetConsigner(), selection::GetBook());        select_consigner(selection::GetConsigner())->Render();        break;};function display_consigner_books($id) {    $list = new RenderList();    $books = consigner_properties::get_books($id);    if (!empty($books) && consigner_properties::get_consigner_id($id) != 0) {        foreach ($books as $book) {            $list->add_object(                new Row(                    new Column(new TextRender(book_properties::get_book_title($book))),                    new Column(new TextRender(book_properties::get_book_isbn($book))),                    new Column(new TextRender('$'.book_properties::get_book_cost($book))),                    new Column(new TextRender(book_properties::get_book_barcode($book))),                    new Column(),                    new Column(                        new Form(align('center'),                            page_action::InputAction(action_types::$remove_book_from_consigner),                            consigner_request::Store(),                            book_request::Store(),                            selection::InputConsigner($id),                            selection::InputBook($book),                            button('Remove')                        )                    )                )            );        }    }    return $list;}function display_sold_consigner_books($id) {    $list = new RenderList();    $books = consigner_properties::get_sold_books($id);    if (!empty($books) && consigner_properties::get_consigner_id($id) != 0) {        foreach ($books as $book) {            $id = $book[consigner_properties::$book_id];            $paid = $book[consigner_properties::$book_paid];            $list->add_object(                new Row(                    new Column(new TextRender(book_properties::get_book_title($id))),                    new Column(new TextRender(book_properties::get_book_isbn($id))),                    new Column(new TextRender('$'.book_properties::get_book_cost($id))),                    new Column(new TextRender(book_properties::get_book_barcode($id))),                    new Column(width(10).align('center'), new TextRender($paid)),                    new Column(                        new Form(align('center'),                            page_action::InputAction(action_types::$remove_book_from_consigner),                            consigner_request::Store(),                            book_request::Store(),                            selection::InputConsigner($id),                            selection::InputBook($book),                            button('Remove')                        )                    )                )            );        }    }    return $list;}function GenerateResults($id) {    $renderlist = new RenderList();    if (consigner_request::GetBookSearch()) {        $renderlist->add_object(            search_books(                array(                    book_properties::$title => true,                    book_properties::$barcode => true,                    book_properties::$publisher => true,                    book_properties::$isbn => true,                    book_properties::$consigner_id => $id                ),                new RenderList(                    selection::InputConsigner($id),                    consigner_request::Store()                )            )        );    }    return $renderlist;}function GenerateConsignerSearch(){    return new TableArr(border(0).cellpadding(0).cellspacing(0).width(75),        new Row(            new Column(align('left').valign('top').style('text-align: left;'),                Consigner::GenerateSearchBox()),            new Column(width(4)),            new Column(align('left').valign('top').style('text-align: left;'),                Consigner::GenerateAddBox()),            new Column(width(75))        )    );}?>