<?phpinclude_once "includes.php";GenerateTransactionSearch()->Render();global $wpdb;switch (page_action::GetAction()) {	case action_types::$search_transactions:		search_transactions()->Render();		break;    case action_types::$select_transaction:        transaction_properties::print_formatting(selection::GetTransaction());        select_transaction(selection::GetTransaction())->Render();        break;    case action_types::$delete_transaction:        transaction_properties::remove_transaction(selection::GetTransaction());        search_transactions()->Render();        break;};function select_transaction($transaction_post_id) {    $table = new TableArr(id('formtable').width(100).border(0).cellspacing(0).cellpadding(0).style('padding-top: 16px;'),        new Row(            new Column(                new TableArr(                    new Row(                        new Column(width(15), new H4(style('margin: 0px;'), new TextRender('Transaction ID'))),                        new Column(width(10), new H4(style('margin: 0px;'), new TextRender('Customer Name'))),                        new Column(width(10), new H4(style('margin: 0px;'), new TextRender('Total'))),                        new Column(width(10), new H4(style('margin: 0px;'), new TextRender('Date'))),                        new Column(width(35).align('right'))                    ),                    new Row(                        new Form(align('center'),                            new Column(style('font-weight: bold;'), new TextRender(transaction_properties::get_id($transaction_post_id))),                            new Column(style('font-weight: bold;'), new TextRender(transaction_properties::get_customer_name($transaction_post_id))),                            new Column(style('font-weight: bold;'), new TextRender('$'.number_format(transaction_properties::get_stored_total($transaction_post_id), 2))),                            new Column(style('font-weight: bold;'), new TextRender(transaction_properties::get_date($transaction_post_id))),                            new Column(),                            new Column(align('right'), new Input(classType('button-primary').onclick("printContent('toPrint');").type('button').value('Print Invoice')))                        ),                        new Column(align('right'),                            new Form(                                transaction_request::Store(),                                page_action::InputAction(action_types::$search_transactions),                                button('Back to Search Results')                            )                        )                    ),                    new Row(                        new Column(colspan(10).style('padding-top: 12px;'), new HR())                    )                )            )        ),        new Row(            new Column(get_book_list($transaction_post_id))        ),        new Row(            new Column(get_refund_list($transaction_post_id))        )    );    return $table;}function get_refund_list($id) {    $titlewidth = 20;    $otherwidth = 10;    $table = new RenderList();    if (!empty(transaction_properties::get_refunds($id))) {        $table = new TableArr(id('formtable') . width(100) . border(0) . cellspacing(0) . cellpadding(0).style('padding-top: 12px;'),            new Row(                new Column(width($titlewidth), new H4(style('margin: 0px; font-size: 14px;'), new TextRender('Refunds'))),                new Column(width($otherwidth), new H4(style('margin: 0px;'), new TextRender(''))),                new Column(width($otherwidth), new H4(style('margin: 0px;'), new TextRender(''))),                new Column(width($otherwidth), new H4(style('margin: 0px;'), new TextRender(''))),                new Column(width($otherwidth), new H4(style('margin: 0px;'), new TextRender(''))),                new Column(width($otherwidth), new H4(style('margin: 0px;'), new TextRender(''))),                new Column(width($otherwidth), new H4(style('margin: 0px;'), new TextRender(''))),                new Column(width($otherwidth)),                new Column()            )        );        $books = transaction_properties::get_refunds($id);        foreach ($books as $book) {            $table->add_object(refund_display_transaction($book));            $table->add_object(                new Row(style('border: none; padding: 0px; height: 1px;'),                    new Column(colspan(10) . style('padding-bottom: 0px;'),                        new HR(style('margin: 0px;')))));        }    }    return $table;}function get_book_list($id) {    $titlewidth = 20;    $otherwidth = 10;    $table = new TableArr(id('formtable').width(100).border(0).cellspacing(0).cellpadding(0),        new Row(            new Column(width($titlewidth), new H4(style('margin: 0px; font-size: 14px;'), new TextRender('Books'))),            new Column(width($otherwidth), new H4(style('margin: 0px;'), new TextRender('Publisher'))),            new Column(width($otherwidth), new H4(style('margin: 0px;'), new TextRender('ISBN'))),            new Column(width($otherwidth), new H4(style('margin: 0px;'), new TextRender('Barcode'))),            new Column(width($otherwidth), new H4(style('margin: 0px;'), new TextRender('Used/New'))),            new Column(width($otherwidth), new H4(style('margin: 0px;'), new TextRender('Quantity'))),            new Column(width($otherwidth), new H4(style('margin: 0px;'), new TextRender('Price'))),            new Column(width($otherwidth), new H4(style('margin: 0px;'), new TextRender('Refunded #'))),            new Column()        )    );    $books = transaction_properties::get_books($id);    foreach ($books as $book){        $table->add_object(book_display_transaction($book));        $table->add_object(            new Row(style('border: none; padding: 0px; height: 1px;'),                new Column(colspan(10).style('padding-bottom: 0px;'),                    new HR(style('margin: 0px;')))));    }    return $table;}function book_display_transaction($book) {    $book_id = $book[transaction_properties::$book_id];    $quantity = $book[transaction_properties::$book_quantity];    $price = $book[transaction_properties::$book_price];    $refunded = $book[transaction_properties::$book_refunded_quantity];    return new Row(        new Column(style('padding-top: 6px; padding-bottom: 6px;'),            new TextRender(book_properties::get_book_title($book_id))),        new Column(style('padding-top: 6px; padding-bottom: 6px;'),            new TextRender(book_properties::get_book_publisher($book_id))),        new Column(style('padding-top: 6px; padding-bottom: 6px;'),            new TextRender(book_properties::get_book_isbn($book_id))),        new Column(style('padding-top: 6px; padding-bottom: 6px;'),            new TextRender(book_properties::get_book_barcode($book_id))),        new Column(style('padding-top: 6px; padding-bottom: 6px;'),            new TextRender(book_properties::get_book_condition($book_id))),        new Column(style('padding-top: 6px; padding-bottom: 6px;'),            new TextRender($quantity)),        new Column(style('padding-top: 6px; padding-bottom: 6px;'),            new TextRender('$'.number_format($price, 2))),        new Column(style('padding-top: 6px; padding-bottom: 6px;'),            new TextRender($refunded))    );}function refund_display_transaction($book) {    $book_id = $book[transaction_properties::$book_id];    $quantity = $book[transaction_properties::$book_quantity];    $price = $book[transaction_properties::$book_price];    return new Row(        new Column(style('padding-top: 6px; padding-bottom: 6px;'),            new TextRender(book_properties::get_book_title($book_id))),        new Column(style('padding-top: 6px; padding-bottom: 6px;'),            new TextRender(book_properties::get_book_publisher($book_id))),        new Column(style('padding-top: 6px; padding-bottom: 6px;'),            new TextRender(book_properties::get_book_isbn($book_id))),        new Column(style('padding-top: 6px; padding-bottom: 6px;'),            new TextRender(book_properties::get_book_barcode($book_id))),        new Column(style('padding-top: 6px; padding-bottom: 6px;'),            new TextRender(book_properties::get_book_condition($book_id))),        new Column(style('padding-top: 6px; padding-bottom: 6px;'),            new TextRender($quantity)),        new Column(style('padding-top: 6px; padding-bottom: 6px;'),            new TextRender('$'.number_format($price, 2))),        new Column()    );}function GenerateTransactionSearch(){    return new TableArr(border(0).cellpadding(0).cellspacing(0).width(40),        new Row(            request_form_transactions()        ),        new Row(            new Column(colspan(10), new HR())        )    );}function search_transactions(){    $default = array(        transaction_properties::$id => true,        transaction_properties::$date => true,        transaction_properties::$customer_name => true,        transaction_properties::$total => true,        transaction_properties::$transfirstid => true,        transaction_properties::$taxrate => true,        transaction_properties::$removeable => true,        transaction_properties::$completed => true,        transaction_properties::$printable => true,        transaction_properties::$selectable => true    );    $displays = func_get_args();    if (count($displays) <= 0){        $display = $default;    }    else {        $display = $displays[0];    }    $table =        new TableArr(id('formtable').width(100).border(0).cellspacing(0).cellpadding(0).style('margin: 10px 0 50px;'));    if (array_key_exists(transaction_properties::$id, $display)){        $table->add_object(            new Column(width(25).style('padding-bottom: 8px; font-weight: bold; font-size: 14px'), new TextRender('ID'))        );    }    if (array_key_exists(transaction_properties::$date, $display)){        $table->add_object(            new Column(width('auto').style('padding-bottom: 8px; font-weight: bold; font-size: 14px'), new TextRender('Date'))        );    }    if (array_key_exists(transaction_properties::$total, $display)){        $table->add_object(            new Column(width('auto').style('padding-bottom: 8px; font-weight: bold; font-size: 14px'), new TextRender('Total'))        );    }    if (array_key_exists(transaction_properties::$customer_name, $display)){        $table->add_object(            new Column(width('auto').style('padding-bottom: 8px; font-weight: bold; font-size: 14px'), new TextRender('Name'))        );    }    if (array_key_exists(transaction_properties::$customer_address, $display)){        $table->add_object(            new Column(width('auto').style('padding-bottom: 8px; font-weight: bold; font-size: 14px'), new TextRender('Address'))        );    }    if (array_key_exists(transaction_properties::$customer_email, $display)){        $table->add_object(            new Column(width('auto').style('padding-bottom: 8px; font-weight: bold; font-size: 14px'), new TextRender('Email'))        );    }    if (array_key_exists(transaction_properties::$transfirstid, $display)){        $table->add_object(            new Column(width('auto').style('padding-bottom: 8px; font-weight: bold; font-size: 14px'), new TextRender('TransFirst ID'))        );    }    if (array_key_exists(transaction_properties::$taxrate, $display)){        $table->add_object(            new Column(width('auto').style('padding-bottom: 8px; font-weight: bold; font-size: 14px'), new TextRender('Tax Rate'))        );    }    $table->add_object(        new Row(style('border: none; padding-bottom: 8px; height: 1px;'),            new Column(colspan(count($display).style('padding-bottom: 8px;')),                new HR(style('margin: 0px;')))));    $query = QueryTransaction();    while ($query->have_posts()):        $query->the_post();        global $post;        $transaction = $post->ID;        $table->add_object(transaction_display($display, $transaction));        $table->add_object(            new Row(style('border: none; padding: 0px; height: 1px;'),                new Column(colspan(count($display).style('padding-bottom: 0px;')),                    new HR(style('margin: 0px;')))            ));    endwhile;    return $table;}function transaction_display($display, $id) {    $row = new Row();    if (array_key_exists(transaction_properties::$id, $display)){        if (array_key_exists(transaction_properties::$selectable, $display)){            $row->add_object(new Column(                new Form(method('POST').name('select_transaction'),                    selection::InputTransaction($id),                    transaction_request::Store(),                    page_action::InputAction(action_types::$select_transaction),                    new Input(classType('button').type('submit').name('button').value('Transaction #'.transaction_properties::get_id($id)).style('background:none!important; border:none;                         padding:0!important; font-family:arial,sans-serif; color:#069; box-shadow: 0 0px 0 #ccc; cursor:pointer;'))                )            ));        }        else {            $row->add_object(new Column(                new TextRender('Transaction #'.transaction_properties::get_id($id))            ));        }    }    if (array_key_exists(transaction_properties::$date, $display)){        $row->add_object(new Column(            new TextRender(transaction_properties::get_date($id))        ));    }    if (array_key_exists(transaction_properties::$total, $display)){        $row->add_object(new Column(            new TextRender('$'.number_format(transaction_properties::get_stored_total($id), 2))        ));    }    if (array_key_exists(transaction_properties::$customer_name, $display)){        $row->add_object(new Column(            new TextRender(transaction_properties::get_customer_name($id))        ));    }    if (array_key_exists(transaction_properties::$customer_address, $display)){        $row->add_object(new Column(            new TextRender(transaction_properties::get_customer_address($id))        ));    }    if (array_key_exists(transaction_properties::$customer_email, $display)){        $row->add_object(new Column(            new TextRender(transaction_properties::get_customer_email($id))        ));    }    if (array_key_exists(transaction_properties::$transfirstid, $display)){        $row->add_object(new Column(            new TextRender(transaction_properties::get_transfirstid($id))        ));    }    if (array_key_exists(transaction_properties::$taxrate, $display)){        $row->add_object(new Column(            new TextRender(transaction_properties::get_taxrate($id))        ));    }    if (array_key_exists(transaction_properties::$removeable, $display)) {        $row->add_object(new Column(align('center'),            new Form(                selection::InputTransaction($id),                transaction_request::Store(),                page_action::InputAction(action_types::$delete_transaction),                button('Remove')            )        ));    }    return $row;}function request_form_transactions() {    $leftwidth = 45;    $rightwidth = 55;    return new Form(action('').id('library').method('post').name('transaction_search'),        new Column(width(12).align('left').valign('top').style('text-align: left;'),            new TableArr(border(0).cellpadding(0).cellspacing(2).id('formtable').width(100),                new Row (                    new Column(align('right').width($leftwidth), new Label(new TextRender('ID:'))),                    new Column(width($rightwidth).style('padding-left: 5px;'), transaction_request::InputID())                ),                new Row (                    new Column(align('right').width($leftwidth), new Label(new TextRender('Date From:'))),                    new Column(width($rightwidth).style('padding-left: 5px;'), transaction_request::InputDateFrom())                ),                new Row (                    new Column(align('right').width($leftwidth), new Label(new TextRender('Date To:'))),                    new Column(width($rightwidth).style('padding-left: 5px;'), transaction_request::InputDateTo())                ),                new Row (                    new Column(align('right').width($leftwidth), new Label(new TextRender('Total From:'))),                    new Column(width($rightwidth).style('padding-left: 5px;'), transaction_request::InputTotalFrom())                ),                new Row (                    new Column(align('right').width($leftwidth), new Label(new TextRender('Total To:'))),                    new Column(width($rightwidth).style('padding-left: 5px;'), transaction_request::InputTotalTo())                ),                new Row (                    new Column(width($leftwidth)),                    new Column(width($rightwidth).align('right').style('padding-left: 5px; padding-top: 5px;'),                        page_action::InputAction(action_types::$search_transactions),                        button('Search')                    )                )            )        ),        new Column(width(18).align('left').valign('top').style('text-align: left;'),            new TableArr(border(0).cellpadding(0).cellspacing(2).id('formtable').width(100),                new Row (                    new Column(align('right').width($leftwidth), new Label(new TextRender('Name:'))),                    new Column(width($rightwidth).style('padding-left: 5px;'), transaction_request::InputCustomerName())                ),                new Row (                    new Column(align('right').width($leftwidth), new Label(new TextRender('Email:'))),                    new Column(width($rightwidth).style('padding-left: 5px;'), transaction_request::InputCustomerEmail())                ),                new Row (                    new Column(align('right').width($leftwidth), new Label(new TextRender('Address:'))),                    new Column(width($rightwidth).style('padding-left: 5px;'), transaction_request::InputCustomerEmail())                ),                new Row (                    new Column(align('right').width($leftwidth), new Label(new TextRender('Tax Rate:'))),                    new Column(width($rightwidth).style('padding-left: 5px;'), transaction_request::InputTaxRate())                ),                new Row (                    new Column(align('right').width($leftwidth), new Label(new TextRender('TransFirst ID:'))),                    new Column(width($rightwidth).style('padding-left: 5px;'), transaction_request::InputTransFirstID())                ),                new Row (                    new Column(align('right').width($leftwidth), new Label(new TextRender('Complete?:'))),                    new Column(width($rightwidth).style('padding-left: 5px;'),                        new Input(type('radio').name(transaction_request::$completed).value(1).checkedAttr('true')),                        new TextRender('True '),                        new Input(type('radio').name(transaction_request::$completed).value(-1)),                        new TextRender('False '),                        new Input(type('radio').name(transaction_request::$completed).value('all')),                        new TextRender('All '))                )            )        )    );}function cast_decimal_precision( $array ) {    $array['where'] = str_replace('DECIMAL','DECIMAL(10,3)',$array['where']);    return $array;}function QueryTransaction() {    $args = array(        'numberposts' => -1,        'posts_per_page' => -1,        'order' => 'ASC',        'orderby' => 'date',        'post_type' => 'transactions'    );    $meta_query_array = array('relation' => 'AND');    if (transaction_request::GetID()) {        $args['s'] = transaction_request::GetID();    }    if (transaction_request::GetDateFrom() || transaction_request::GetDateTo()) {        $meta_query_array[] =            array(                'key' => '_cmb_transaction_date',                'value' => array(transaction_request::GetDateFrom(), transaction_request::GetDateTo()),                'compare' => 'BETWEEN',                'type' => 'DATE'            );    }    if (transaction_request::GetCustomerName()) {        $meta_query_array[] = array(            'key' => '_cmb_transaction_customer_name',            'value' => transaction_request::GetCustomerName()        );    }    if (transaction_request::GetCustomerAddress()) {        $meta_query_array[] = array(            'key' => '_cmb_transaction_customer_address',            'value' => transaction_request::GetCustomerAddress()        );    }    if (transaction_request::GetCustomerEmail()) {        $meta_query_array[] = array(            'key' => '_cmb_transaction_customer_email',            'value' => transaction_request::GetCustomerEmail()        );    }    if (transaction_request::GetTaxRate()) {        $meta_query_array[] = array(            'key' => '_cmb_transaction_taxrate',            'value' => transaction_request::GetTaxRate()        );    }    if (transaction_request::GetTransFirstID()) {        $meta_query_array[] = array(            'key' => '_cmb_transaction_transfirstid',            'value' => transaction_request::GetTransFirstID()        );    }    add_filter('get_meta_sql','cast_decimal_precision');    if (transaction_request::GetTotalFrom()) {        $meta_query_array[] =            array(                'key' => '_cmb_transaction_total',                'value' => transaction_request::GetTotalFrom(),                'compare' => '>',                'type' => 'DECIMAL'            );    }    if (transaction_request::GetTotalTo()) {        $meta_query_array[] =            array(                'key' => '_cmb_transaction_total',                'value' => transaction_request::GetTotalTo(),                'compare' => '<',                'type' => 'DECIMAL'            );    }    if (transaction_request::GetCompleted() && transaction_request::GetCompleted() != 'all') {        $meta_query_array[] = array(            'key' => '_cmb_transaction_completed',            'value' => transaction_request::GetCompleted()        );    }    $args['meta_query'] = $meta_query_array;    return new WP_Query($args);}class transaction_properties {    public static $id = 'transaction_id';    public static $date = 'transaction_date';    public static $customer_name = 'transaction_cust_name';    public static $customer_email = 'transaction_cust_email';    public static $customer_address = 'transaction_cust_address';    public static $transfirstid = 'transaction_transfirst';    public static $taxrate = 'transaction_taxrate';    public static $total = 'transaction_total';    public static $book_id = 'transaction_book';    public static $book_quantity = 'transaction_book_quantity';    public static $book_price = 'transaction_price';    public static $book_refunded_quantity = 'transaction_refunded_book_quantity';    public static $credit_name = 'transaction_credit_name';    public static $credit_amount = 'transaction_credit_amount';    public static $payment_type = 'payment_type';    public static $payment_amount = 'payment_amount';    public static $removeable = 'transaction_removeable';    public static $selectable = 'transaction_selectable';    public static $printable = 'transaction_printable';    public static $completed = 'transaction_completed';    public static function create_book_transaction($book, $quantity) {        return array(            self::$book_id => $book,            self::$book_quantity => $quantity,            self::$book_price => book_properties::get_book_saleprice($book),            self::$book_refunded_quantity => 0,        );    }    public static function create_refund_transaction($book, $quantity) {        return array(            self::$book_id => $book,            self::$book_quantity => $quantity,            self::$book_price => book_properties::get_book_saleprice($book)        );    }    public static function create_credit_transaction($name, $amount) {        return array(            self::$credit_name => $name,            self::$credit_amount => $amount        );    }    public static function get_refund_book_printing($id) {        $books = self::get_refunds($id);        $list = new RenderList();        if (!empty($books)) {            $list->add_object(                new Row(                    new Column(colspan(2), new H4(style('margin: 0px; padding-top: 4px; padding-bottom: 4px;'), new TextRender('Refunds:')))                )            );            $list->add_object(new Row(style('border: none; padding: 0px; height: 1px;'),                new Column(colspan(10).style('padding-bottom: 0px;'),                    new HR(style('margin: 0px;')))));            foreach ($books as $book) {                $book_id = $book[self::$book_id];                $title = book_properties::get_book_title($book_id);                $price = $book[self::$book_price];                $quantity = $book[self::$book_quantity];                $lineTotal = $price * $quantity;                $list->add_object(                    new Row(                        new Column(align('left') . colspan(2) . valign('top'),                            new TextRender(                                '(' . $quantity . ') ' . $title                            )                        ),                        new Column(valign('top') . width(15),                            new TextRender('$' . number_format($lineTotal, 2))                        )                    )                );            }        }        return $list;    }    public static function get_book_printing($id) {        $books = self::get_books($id);        $list = new RenderList();        if (!empty($books)) {            $list->add_object(                new Row(                    new Column(colspan(2), new H4(style('margin: 0px; padding-top: 4px; padding-bottom: 4px;'), new TextRender('Books:')))                )            );            $list->add_object(new Row(style('border: none; padding: 0px; height: 1px;'),                new Column(colspan(10).style('padding-bottom: 0px;'),                    new HR(style('margin: 0px;')))));            foreach ($books as $book) {                $book_id = $book[self::$book_id];                $title = book_properties::get_book_title($book_id);                $price = $book[self::$book_price];                $quantity = $book[self::$book_quantity];                $lineTotal = $price * $quantity;                $list->add_object(                    new Row(                        new Column(align('left') . colspan(2) . valign('top'),                            new TextRender(                                '(' . $quantity . ') ' . $title                            )                        ),                        new Column(valign('top') . width(15),                            new TextRender('$' . number_format($lineTotal, 2))                        )                    )                );            }        }        return $list;    }    public static function get_credit_printing($id) {        $credits = self::get_credits($id);        $list = new RenderList();        if (!empty($credits)) {            $list->add_object(                new Row(                    new Column(colspan(2), new H4(style('margin: 0px; padding-top: 4px; padding-bottom: 4px;'), new TextRender('Credits:')))                )            );            $list->add_object(new Row(style('border: none; padding: 0px; height: 1px;'),                new Column(colspan(10).style('padding-bottom: 0px;'),                    new HR(style('margin: 0px;')))));            foreach ($credits as $credit) {                $name = $credit[self::$credit_name];                $amount = $credit[self::$credit_amount];                $list->add_object(                    new Row(                        new Column(align('left') . colspan(2) . valign('top'),                            new TextRender(                                $name                            )                        ),                        new Column(valign('top') . width(15),                            new TextRender('-$' . number_format($amount, 2))                        )                    )                );            }        }        return $list;    }    public static function get_payment_text($type) {        if ($type == checkout_payment::$payment_cash) {            return 'Cash';        }        if ($type == checkout_payment::$payment_credit) {            return 'Credit';        }        if ($type == checkout_payment::$payment_check) {            return 'Check';        }        if ($type == checkout_payment::$payment_phone) {            return 'Phone';        }    }    public static function get_payment_printing($id) {        $payments = self::get_payment_types($id);        $list = new RenderList();        if (!empty($payments)) {            foreach ($payments as $payment) {                $type = $payment[self::$payment_type];                $amount = $payment[self::$payment_amount];                $list->add_object(                    new Row(                        new Column(align('left') . colspan(2) . valign('top'),                            new TextRender(                                self::get_payment_text($type)                            )                        ),                        new Column(valign('top') . width(15),                            new TextRender('-$' . number_format($amount, 2))                        )                    )                );            }        }        return $list;    }    public static function get_refund_printing($id) {        $list = new RenderList();        if (self::get_refund_amount($id) > 0) {            $list->add_object(                new Row(                    new Column(valign('top')),                    new Column(align('right').valign('top').width(10),                        new Strong(new TextRender('Refund:'))),                    new Column(style('padding-left: 4px;'),                        new Strong(new TextRender(' $'.number_format(transaction_properties::get_refund_amount($id), 2)))                    )                )            );        }        else {            $list->add_object(                new Row(                    new Column(valign('top')),                    new Column(align('right').valign('top').width(10),                        new Strong(new TextRender('Due:'))),                    new Column(style('padding-left: 4px;'),                        new Strong(new TextRender(' $'.number_format(0, 2)))                    )                )            );        }        return $list;    }    public static function get_refund_amount($id) {        $amountPaid = ceil(self::get_total_paid($id) * 100);        $total = ceil(self::get_total($id) * 100);        if ($amountPaid > $total) {            return self::get_total_paid($id) - self::get_total($id);        }        else return 0;    }    public static function get_total_paid($id) {        $payments = self::get_payment_types($id);        $total = 0;        if (!empty($payments)) {            foreach ($payments as $payment) {                $amount = $payment[self::$payment_amount];                $total = $total + $amount;            }        }        return $total;    }    public static function get_id($postid){        return get_post_meta($postid, '_cmb_transaction_id', true);    }    public static function set_id($postid, $id){        $titleupdate = array(            'ID'           => $postid,            'post_title'   => $id,        );        wp_update_post($titleupdate);        update_post_meta($postid, '_cmb_transaction_id', $id);    }    public static function get_date($postid){        return get_post_meta($postid, '_cmb_transaction_date', true);    }    public static function set_date($postid, $date){        update_post_meta($postid, '_cmb_transaction_date', $date);    }    public static function get_transfirstid($id){        return get_post_meta($id, '_cmb_transaction_transfirstid', true);    }    public static function set_transfirstid($id, $transfirstid){        update_post_meta($id, '_cmb_transaction_transfirstid', $transfirstid);    }    public static function get_completed($id){        return get_post_meta($id, '_cmb_transaction_completed', true);    }    public static function set_completed($id, $completed){        update_post_meta($id, '_cmb_transaction_completed', $completed);    }    public static function get_books($id) {        return get_post_meta($id, '_cmb_transaction_books', true);    }    public static function get_refunds($id) {        return get_post_meta($id, '_cmb_transaction_refunds', true);    }    public static function set_books_from_cart($id, $cart) {        $books = array();        if (!empty($cart)) {            foreach ($cart as $key => $value) {                $book = $key;                $quantity = $value[checkout_cart::$cart_book_quantity];                $books[] = self::create_book_transaction($book, $quantity);            }        }        self::set_books($id, $books);    }    public static function set_refunds_from_cart($id, $cart) {        $books = array();        if (!empty($cart)) {            foreach ($cart as $key => $value) {                $book = $key;                $quantity = $value[checkout_cart::$cart_book_quantity];                $books[] = self::create_book_transaction($book, $quantity);            }        }        self::set_refunds($id, $books);    }    public static function set_credits_from_cart($id, $credits) {        $creditarr = array();        if (!empty($credits)) {            foreach ($credits as $key => $value) {                $name = $value[checkout_cart::$credit_name];                $amount = $value[checkout_cart::$credit_amount];                $creditarr[] = self::create_credit_transaction($name, $amount);            }        }        self::set_credits($id, $creditarr);    }    public static function set_books($id, $books) {        update_post_meta($id, '_cmb_transaction_books', $books);    }    public static function set_refunds($id, $books) {        update_post_meta($id, '_cmb_transaction_refunds', $books);    }    public static function get_taxrate($id){        return get_post_meta($id, '_cmb_transaction_taxrate', true);    }    public static function set_taxrate($id, $tax){        update_post_meta($id, '_cmb_transaction_taxrate', $tax);    }    public static function create_payment_type($type, $amount, $transfirst) {        return array(            self::$payment_type => $type,            self::$payment_amount => $amount,            self::$transfirstid => $transfirst        );    }    public static function get_payment_types($id){        return get_post_meta($id, '_cmb_transaction_payment_types', true);    }    public static function set_payment_types($id, $types){        update_post_meta($id, '_cmb_transaction_payment_types', $types);    }    public static function add_payment($id, $type, $amount) {        $payments = self::get_payment_types($id);        if (!$payments) {            $payments = array();        }        $payments[] = self::create_payment_type($type, $amount, -1);        self::set_payment_types($id, $payments);    }    public static function add_payment_credit($id, $type, $amount, $transfirst) {        $payments = self::get_payment_types($id);        if (!$payments) {            $payments = array();        }        $payments[] = self::create_payment_type($type, $amount, $transfirst);        self::set_payment_types($id, $payments);    }    public static function remove_payment($id, $index) {        $payments = self::get_payment_types($id);        if (!$payments) return;        if ($index > (count($payments) - 1)) return;        unset($payments[$index]);        $payments = array_values($payments);        self::set_payment_types($id, $payments);    }    public static function add_book($id, $book, $quantity) {        $books = self::get_books($id);        if (!$books){            $books = array();        }        $books[$book] = self::create_book_transaction($book, $quantity);        self::set_stored_total($id, self::get_total($id));    }    public static function refund_book($id, $book, $quantity) {        $books = self::get_refunds($id);        if (array_key_exists($book, $books)) {            $existing_quantity = $books[$book][self::$book_quantity];            $refunded_quantity = $books[$book][self::$book_refunded_quantity];            if ($quantity > $existing_quantity) {                $quantity = $existing_quantity;            }            $books[$book][self::$book_quantity] = $existing_quantity - $quantity;            $books[$book][self::$book_refunded_quantity] = $refunded_quantity + $quantity;        }        self::set_refunds($id, $books);    }    public static function get_subtotal($id) {        $books = self::get_books($id);        $total = 0;        if (!empty($books)) {            foreach ($books as $book) {                $price = $book[self::$book_price];                $quantity = $book[self::$book_quantity];                $lineTotal = $price * $quantity;                $total = $total + $lineTotal;            }            return $total;        }    }    public static function get_credits($id) {        return get_post_meta($id, '_cmb_transaction_credits', true);    }    public static function set_credits($id, $credits) {        update_post_meta($id, '_cmb_transaction_credits', $credits);    }    public static function get_stored_total($id) {        return get_post_meta($id, '_cmb_transaction_total', true);    }    public static function set_stored_total($id, $total) {        update_post_meta($id, '_cmb_transaction_total', (float)$total);    }    public static function get_customer_name($transaction_id){        return get_post_meta($transaction_id, '_cmb_transaction_customer_name', true);    }    public static function set_customer_name($transaction_id, $name){        update_post_meta($transaction_id, '_cmb_transaction_customer_name', $name);    }    public static function get_customer_email($transaction_id){        return get_post_meta($transaction_id, '_cmb_transaction_customer_email', true);    }    public static function set_customer_email($transaction_id, $name){        update_post_meta($transaction_id, '_cmb_transaction_customer_email', $name);    }    public static function get_customer_address($transaction_id){        return get_post_meta($transaction_id, '_cmb_transaction_customer_address', true);    }    public static function set_customer_address($transaction_id, $name){        update_post_meta($transaction_id, '_cmb_transaction_customer_address', $name);    }    public static function remove_transaction($post) {        wp_delete_post($post);    }    public static function get_total($id) {        return self::get_subtotal($id) + self::get_tax_total($id) - self::get_credit_total($id) - self::get_refund_total($id);    }    public static function get_refund_total($id) {        $refunds = self::get_refunds($id);        $total = 0;        if (!empty($refunds)) {            foreach ($refunds as $refund) {                $amount = $refund[self::$book_price];                $total = $total + $amount;            }        }        return $total;    }    public static function get_credit_total($id) {        $credits = self::get_credits($id);        $total = 0;        if (!empty($credits)) {            foreach ($credits as $credit) {                $amount = $credit[self::$credit_amount];                $total = $total + $amount;            }        }        return $total;    }    public static function get_tax_total($id) {        $taxpercent = transaction_properties::get_taxrate($id);        $subtotal = self::get_subtotal($id);        return $subtotal * $taxpercent - self::get_refund_total($id) * $taxpercent;    }    public static function print_formatting($id) {        $print =            new Div(style('display: none;'),                new Div(id('toPrint'),                    new Paragraph(style('text-align: center;'),                        new Strong(new TextRender('Home Works for Books')),                        new BR(),                        new EM(new TextRender('Your homeschool connection for discounted new and used homeschool materials!'))                    ),                    new Paragraph(style('text-align: center;'),                        new TextRender(get_option('invoiceaddress')),                        new BR(),                        new Strong(new TextRender('Phone: ')),                        new TextRender(get_option('invoicephone')),                        new BR(),                        new TextRender('Come visit us online at '),                        new TextRender(get_option('invoiceURL')),                        new BR(),                        new BR(),                        new TextRender(date("Y/m/d H:i:s")),                        new BR(),                        new TextRender('Cashier: '.get_user_name())                    ),                    new Paragraph(), //blank                    new TableArr(border(0).cellpadding(0).cellspacing(0).width(100),                        transaction_properties::get_book_printing($id),                        transaction_properties::get_refund_book_printing($id),                        transaction_properties::get_credit_printing($id),                        new Row(                            new Column(),                            new Column(align('left').colspan(2).valign('middle'),                                new HR()                            )                        ),                        new Row(                            new Column(valign('top')),                            new Column(align('right').valign('top').width(10),                                new Strong(new TextRender('Subtotal:'))),                            new Column(style('padding-left: 4px;'),                                new Strong(new TextRender(' $'.number_format(transaction_properties::get_subtotal($id), 2)))                            )                        ),                        new Row(                            new Column(valign('top')),                            new Column(align('right').valign('top').width(10),                                new Strong(new TextRender('Refunds:'))),                            new Column(style('padding-left: 4px;'),                                new Strong(new TextRender(' -$'.number_format(transaction_properties::get_refund_total($id), 2)))                            )                        ),                        new Row(                            new Column(valign('top')),                            new Column(align('right').valign('top').width(10),                                new Strong(new TextRender('Credits:'))),                            new Column(style('padding-left: 4px;'),                                new Strong(new TextRender(' $'.number_format(transaction_properties::get_credit_total($id), 2)))                            )                        ),                        new Row(                            new Column(valign('top')),                            new Column(align('right').valign('top').width(10),                                new Strong(new TextRender('Tax:'))),                            new Column(style('padding-left: 4px;'),                                new Strong(new TextRender(' $'.number_format(transaction_properties::get_tax_total($id), 2)))                            )                        ),                        new Row(                            new Column(),                            new Column(align('left').colspan(2).valign('middle'),                                new HR()                            )                        ),                        new Row(                            new Column(valign('top')),                            new Column(align('right').valign('top').width(10),                                new Strong(new TextRender('Total:'))),                            new Column(style('padding-left: 4px;'),                                new Strong(new TextRender(' $'.number_format(transaction_properties::get_total($id), 2)))                            )                        ),                        new Row(                            new Column(colspan(2), new H4(style('margin: 0px; padding-top: 4px; padding-bottom: 4px;'), new TextRender('Payments:')))                        ),                        new Row(style('border: none; padding: 0px; height: 1px;'),                            new Column(colspan(10).style('padding-bottom: 0px;'),                                new HR(style('margin: 0px;')))),                        transaction_properties::get_payment_printing($id),                        transaction_properties::get_refund_printing($id)                    ),                    new Paragraph(style('text-align: center;'),                        new TextRender(get_option('invoicepromo'))                    ),                    new Paragraph(style('text-align: center;'),                        new Strong(new TextRender('Invoice: #')),                        new TextRender(transaction_properties::get_id($id)),                        new BR(),                        new TextRender('Customer Copy')                    )                )            );        $print->Render();    }}class transaction_request {    public static $id = 'req_transaction_id';    public static $datefrom = 'req_transaction_date_from';    public static $dateto = 'req_transaction_date_to';    public static $customer_name = 'req_transaction_cust_name';    public static $customer_email = 'req_transaction_cust_email';    public static $customer_address = 'req_transaction_cust_address';    public static $transfirstid = 'req_transaction_transfirst';    public static $taxrate = 'req_transaction_taxrate';    public static $totalto = 'req_transaction_total_to';    public static $totalfrom = 'req_transaction_total_from';    public static $completed = 'req_transaction_completed';    public static function GetCompleted() {        return $_REQUEST[self::$completed];    }    public static function GetID() {        return $_REQUEST[self::$id];    }    public static function InputID() {        return new Input(id(self::$id).name(self::$id).type('text'));    }    public static function GetDateFrom() {        return $_REQUEST[self::$datefrom];    }    public static function InputDateFrom() {        date_default_timezone_set('America/Chicago');        return new Input(id(self::$datefrom).name(self::$datefrom).type('date').value(date("Y-m-d", mktime(0, 0, 0, 1, 1, 2014))));    }    public static function GetDateTo() {        return $_REQUEST[self::$dateto];    }    public static function InputDateTo() {        date_default_timezone_set('America/Chicago');        return new Input(id(self::$dateto).name(self::$dateto).type('date').value(date('Y-m-d')));    }    public static function GetCustomerName() {        return $_REQUEST[self::$customer_name];    }    public static function InputCustomerName() {        return new Input(id(self::$customer_name).name(self::$customer_name).type('text'));    }    public static function GetCustomerAddress() {        return $_REQUEST[self::$customer_address];    }    public static function InputCustomerAddress() {        return new Input(id(self::$customer_address).name(self::$customer_address).type('text'));    }    public static function GetCustomerEmail() {        return $_REQUEST[self::$customer_email];    }    public static function InputCustomerEmail() {        return new Input(id(self::$customer_email).name(self::$customer_email).type('text'));    }    public static function GetTransFirstID() {        return $_REQUEST[self::$transfirstid];    }    public static function InputTransFirstID() {        return new Input(id(self::$transfirstid).name(self::$transfirstid).type('text'));    }    public static function GetTaxRate() {        return $_REQUEST[self::$taxrate];    }    public static function InputTaxRate() {        return new Input(id(self::$taxrate).name(self::$taxrate).type('text'));    }    public static function GetTotalFrom() {        return $_REQUEST[self::$totalfrom];    }    public static function GetTotalTo() {        return $_REQUEST[self::$totalto];    }    public static function InputTotalFrom() {        return new Input(id(self::$totalfrom).name(self::$totalfrom).type('double'));    }    public static function InputTotalTo() {        return new Input(id(self::$totalto).name(self::$totalto).type('double'));    }    public static function Store() {        $renderlist = new RenderList(            new Input(id(self::$id).name(self::$id).type('hidden').value(self::GetID())),            new Input(id(self::$customer_address).name(self::$customer_address).type('hidden').value(self::GetCustomerAddress())),            new Input(id(self::$customer_email).name(self::$customer_email).type('hidden').value(self::GetCustomerEmail())),            new Input(id(self::$customer_name).name(self::$customer_name).type('hidden').value(self::GetCustomerName())),            new Input(id(self::$datefrom).name(self::$datefrom).type('hidden').value(self::GetDateFrom())),            new Input(id(self::$dateto).name(self::$dateto).type('hidden').value(self::GetDateTo())),            new Input(id(self::$taxrate).name(self::$taxrate).type('hidden').value(self::GetTaxRate())),            new Input(id(self::$transfirstid).name(self::$transfirstid).type('hidden').value(self::GetTransFirstID())),            new Input(id(self::$totalto).name(self::$totalto).type('hidden').value(self::GetTotalTo())),            new Input(id(self::$totalfrom).name(self::$totalfrom).type('hidden').value(self::GetTotalFrom())),            new Input(id(self::$completed).name(self::$completed).type('hidden').value(self::GetCompleted()))        );        return $renderlist;    }}?>