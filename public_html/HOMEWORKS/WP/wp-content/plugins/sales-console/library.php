<?phpinclude_once 'bookmethods.php';include_once "includes.php";//Enqueue the JS scriptswp_enqueue_media();//Generate the top search / add book sectionGenerateSearchAndAdd()->Render();//Default search settings$library_search = array(    book_properties::$title => true,    book_properties::$publisher => true,    book_properties::$barcode => true,    book_properties::$isbn => true,    book_properties::$cost => true,    book_properties::$MSRP => true,    book_properties::$price => true,    book_properties::$selectable => true,    book_properties::$condition => true,    book_properties::$availability => true,    book_properties::$quantity => true,    book_properties::$hasimage => true);global $wpdb;switch (page_action::GetAction()) {    case action_types::$search:        search_books($library_search)->Render();        break;    case action_types::$add_image_to_book_search:        add_image(selection::GetBook());        search_books($library_search)->Render();        break;    case action_types::$add_image_to_book_edit:        add_image(selection::GetBook());        select_book(selection::GetBook())->Render();        break;    case action_types::$select_book:        select_book(selection::GetBook())->Render();        break;    case action_types::$add_book:        $id = book_addition::add_book();        select_book($id)->Render();        break;    case action_types::$change_book:        if (isset($_POST[action_types::$edit_book])) {            book_editing::update_book(selection::GetBook());            select_book(selection::GetBook())->Render();        } else if (isset($_POST[action_types::$delete_book])) {            select_book(selection::GetBook())->Render();        } else if (isset($_POST[action_types::$delete_book_sure])){            book_editing::delete_book(selection::GetBook());            search_books($library_search)->Render();        }        break;    case action_types::$add_book_to_owner:        book_properties::add_book(selection::GetBook(), consigner_properties::get_owner());        select_book(selection::GetBook())->Render();        break;};//Add the scripts to the pagemedia_selector_print_scripts();function select_book($id) {    $form = new Form(method('post').id('edit_book_form'));    return new TableArr(id('formtable').width(100).border(0).cellspacing(0).cellpadding(0).style('margin: 10px 0 50px;'),        $form,        new Row(            new Column(width(24).align('left'), new TextRender('Title')),            new Column(align('left'), new TextRender('ISBN')),            new Column(align('left'), new TextRender('Publisher')),            new Column(align('left'), new TextRender('Cost')),            new Column(align('left'), new TextRender('Retail Price')),            new Column(align('left'), new TextRender('Sale Price')),            new Column(align('left').width(10), new TextRender('Barcode')),            new Column(align('left'), new TextRender('Condition')),            new Column(align('left'), new TextRender('Availability')),            new Column(align('left').style('padding-right: 15px; padding-left: 15px;'), new TextRender('Quantity')),            new Column(align('center').width(5), new TextRender('Image?'))        ),        new Row(            new Column(align('left'),                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$title).id(book_editing::$title).type('text').value(book_properties::get_book_title($id)))),            new Column(                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$isbn).id(book_editing::$isbn).type('text').value(book_properties::get_book_isbn($id)))),            new Column(                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$publisher).id(book_editing::$publisher).type('text').value(book_properties::get_book_publisher($id)))),            new Column(                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$cost).id(book_editing::$cost).type('text').value(book_properties::get_book_cost($id)))),            new Column(                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$MSRP).id(book_editing::$MSRP).type('text').value(book_properties::get_book_msrp($id)))),            new Column(                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$price).id(book_editing::$price).type('text').value(book_properties::get_book_saleprice($id)))),            new Column(                new H4(style('width: 100%; padding: 6px 4px 6px;'), new TextRender(book_properties::get_book_barcode($id)))),            new Column(                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$condition).id(book_editing::$condition).type('text').value(book_properties::get_book_condition($id)))),            new Column(                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$availability).id(book_editing::$availability).type('text').value(book_properties::get_book_availablity($id)))),            new Column(align('center'),                new TextRender(book_properties::get_consigner_count($id))),            new Column(align('center'),                book_properties::get_image_form($id, action_types::$add_image_to_book_edit)            )        ),        new Row(            new Column(style('padding-top: 16px; padding-bottom: 8px;'),                new TableArr(id('consignertable').width(100).border(0).cellspacing(0).cellpadding(0),                    GetConsigners($id)                )            )        ),        new Row(            new Column(                new Form(method('post'),                    page_action::InputAction(action_types::$add_book_to_owner),                    selection::InputBook($id),                    book_request::Store(),                    button('Add Book to Owner')                )            )        ),        new Row(            new Column(colspan(10)),            new Column(GetDeleteMessage())        ),        new Row(            new Column(colspan(9), new HR()),            new Column(                new Input(form('edit_book_form').id(page_action::$action).name(page_action::$action).type('hidden').value(action_types::$change_book)),                book_request::Store('edit_book_form'),                new Input(form('edit_book_form').id(selection::$book).type('hidden').name(selection::$book).value($id)),                new Input(form('edit_book_form').classType('button-primary').type('submit').name(action_types::$edit_book).value('Update'))            ),            new Column(                new Input(form('edit_book_form').classType('button-primary').type('submit').name(GetDeleteType()).value('Delete'))            )        ),        new Row(            new Column(                new Form(method('post'),                    page_action::InputAction(action_types::$search),                    book_request::Store(),                    button('Back to Search Results')                )            )        )    );}function GetDeleteMessage() {    if (isset($_POST[action_types::$delete_book])) {        return new TextRender('Are you sure? Press delete again to confirm.');    }    else return new TextRender();}function GetDeleteType() {    if (isset($_POST[action_types::$delete_book])) {        return action_types::$delete_book_sure;    }    else return action_types::$delete_book;}function GetConsigners($id) {    $list = new RenderList();    $consigners = book_properties::get_consigners($id);    if (count($consigners) > 0) {        $list->add_object(new Row(            new Column(new Label(style('font-weight: bold;'), new TextRender('Name'))),            new Column(new Label(style('font-weight: bold;'), new TextRender('Date Added')))        ));        foreach ($consigners as $consigner) {            $list->add_object(new Row(                new Column(style('padding-bottom: 0px'),                    new Form(method('post').action('admin.php?page=sales_console_consigners'),                        new Input(id(consigner_request::$back_to_book).name(consigner_request::$back_to_book).type('hidden').value('admin.php?page=library_breakdown')),                        selection::InputBook($id),                        selection::InputConsigner($consigner),                        page_action::InputAction(action_types::$select_consigner),                        book_request::Store(),                        new Input(classType('button').type('submit').name('button').value(get_the_title($consigner)).style('background:none!important; border:none;                             padding:0!important; font-family:arial,sans-serif; color:#069; box-shadow: 0 0px 0 #ccc; cursor:pointer;'))                    )                ),                new Column(new TextRender(consigner_properties::get_consigner_date($consigner)))            ));        }    }    return $list;}function GenerateSearchAndAdd() {    return new TableArr(border(0).cellpadding(0).cellspacing(0).width(100),        new Row(            request_form_books(),            new Column(width(30)),            new Form(width(30).style('text-align: right;').method('POST').action('').name('adding_book'),                new Column(width(15).align('left').valign('top').style('text-align: left;'),                    new TableArr(id('formtable').border(0).cellspacing(2).cellpadding(0).classType('inlineTable'),                        new Row(                            new Column(align('right'), new Label(new TextRender('Title:'))),                            new Column(style('padding-left: 5px;'), book_addition::InputTitle())                        ),                        new Row(                            new Column(align('right'), new Label(new TextRender('Department:'))),                            new Column(style('padding-left: 5px;'), new TextRender(wp_dropdown_categories(array(                                'hide_empty' => 0,                                'name' => book_addition::$department,                                'hierarchical' => true,                                'show_option_all' => 'Choose one',                                'echo' => 0                            ))))                        ),                        new Row(                            new Column(align('right'), new Label(new TextRender('Availability:'))),                            new Column(style('padding-left: 5px;'),                                new Input(type('radio').name(book_addition::$availability).value('Active')),                                new TextRender('Active '),                                new Input(type('radio').name(book_addition::$availability).value('Inactive')),                                new TextRender('Inactive '))                        ),                        new Row(                            new Column(align('right'), new Label(new TextRender('Cost:'))),                            new Column(style('padding-left: 5px;'), book_addition::InputCost())                        ),                        new Row(                            new Column(align('right'), new Label(new TextRender('Price:'))),                            new Column(style('padding-left: 5px;'), book_addition::InputPrice())                        )                    )                ),                new Column(style('float: right; padding-left: 2px;').valign('top'),                    new TableArr(id('formtable').border(0).cellspacing(2).cellpadding(0).classType('inlineTable'),                        new Row(                            new Column(align('right'), new Label(new TextRender('MSRP:'))),                            new Column(style('padding-left: 5px;'), book_addition::InputMSRP())                        ),                        new Row(                            new Column(align('right'), new Label('', new TextRender('Vendor:'))),                            new Column(style('padding-left: 5px;'), book_addition::InputPublisher())                        ),                        new Row(                            new Column(align('right'), new Label(new TextRender('Condition:'))),                            new Column(style('padding-left: 5px;'),                                new Input(type('radio').name(book_addition::$condition).value('New')),                                new TextRender('New '),                                new Input(type('radio').name(book_addition::$condition).value('Used')),                                new TextRender('Used '))                        ),                        new Row(                            new Column(align('right'), new Label('', new TextRender('ISBN:'))),                            new Column(style('padding-left: 5px;'), book_addition::InputISBN())                        ),                        new Row(                            new Column(align('right'), new Label('', new TextRender('Quantity:'))),                            new Column(style('padding-left: 5px;'), book_addition::InputQuantity())                        ),                        new Row (                            new Column(),                            new Column(width(35).align('right').style('padding-bottom: 15px; padding-top: 10px;'),                                page_action::InputAction(action_types::$add_book),                                new Input(classType('button-primary').type('submit').name('button').value('Add Book'))                            )                        )                    )                )            )        )    );}function media_selector_print_scripts() {    ?><script type='text/javascript'>        jQuery( document ).ready( function( $ ) {            var file_frame;            jQuery('.upload_image_button').on('click', function( event ){                var element = event.srcElement;                var post_id = event.srcElement.id;                var parent = element.parentElement;                event.preventDefault();                if ( file_frame ) {                    file_frame.open();                    return;                }                // Create the media frame.                file_frame = wp.media.frames.file_frame = wp.media({                    title: 'Select a image to upload',                    button: {                        text: 'Use this image',                    },                    multiple: false	// Set to true to allow multiple files to be selected                });                // When an image is selected, run a callback.                file_frame.on( 'select', function() {                    // We set multiple to false so only get one image from the uploader                    attachment = file_frame.state().get('selection').first().toJSON();                    attach = parent.elements["image_attachment_id"];                    attach.value = attachment.id;                    parent.submit();                });                // Finally, open the modal                file_frame.open();            });        });    </script><?php}?>