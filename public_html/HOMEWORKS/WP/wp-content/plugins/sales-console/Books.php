<?phpinclude_once "includes.php";selection::GetPages(vars::$library_page);selection::GetIDS();//Enqueue the JS scriptswp_enqueue_media();//Generate the top search / add book sectionBook::GenerateSearchAndAdd()->Render();global $wpdb;switch (page_action::GetAction()) {    case action_types::get_search(Book::$source):        $_SESSION[action_types::$consigner_books] = false;        page_action::SetNewAction(action_types::get_search(Book::$source));        GenerateSearch(Book::$props, Book::$source, Book::$post_type)->Render();        break;    case action_types::$add_image_to_book_search:        add_image(selection::GetID(Book::$source));        page_action::SetNewAction(action_types::get_search(Book::$source));        GenerateSearch(Book::$props, Book::$source, Book::$post_type);        break;    case action_types::$add_image_to_book_edit:        add_image(selection::GetBook());        page_action::SetNewAction(action_types::get_select(Book::$source));        EditDisplay(Book::$props, selection::GetID(Book::$source), 5, Book::$source)->Render();        break;    case action_types::get_select(Book::$source):        page_action::SetNewAction(action_types::get_select(Book::$source));        EditDisplay(Book::$props, selection::GetID(Book::$source), 5, Book::$source)->Render();        break;    case action_types::get_add(Book::$source):        $id = Add(Book::$props, Book::$source, Book::$post_type);        page_action::SetNewAction(action_types::get_select(Book::$source));        EditDisplay(Book::$props, $id, 5, Book::$source)->Render();        break;    case action_types::get_update(Book::$source):        Update(Book::$props, selection::GetID(Book::$source));        page_action::SetNewAction(action_types::get_select(Book::$source));        EditDisplay(Book::$props, selection::GetID(Book::$source), 5, Book::$source)->Render();        break;    case action_types::$add_book_to_owner:        Add(Book::$props, Book::$source, Book::$post_type);        EditDisplay(Book::$props, selection::GetID(Book::$source), 5, Book::$source)->Render();        break;    case action_types::get_delete(Book::$source):        $_POST[action_types::$delete_sure] = true;        page_action::SetNewAction(action_types::get_select(Book::$source));        EditDisplay(Book::$props, selection::GetID(Book::$source), 5, Book::$source)->Render();        break;    case action_types::get_delete_sure(Book::$source):        Remove(Book::$source, selection::GetID(Book::$source));        page_action::SetNewAction(action_types::get_search(Book::$source));        GenerateSearch(Book::$props, Book::$source, Book::$post_type)->Render();        break;    default:        selection::ResetPages(vars::$library_page);};//Add the scripts to the pagemedia_selector_print_scripts();function GetConsigners($id) {    $list = new RenderList();    $consigners = book_properties::get_consigners($id);    if (count($consigners) > 0) {        $list->add_object(new Row(            new Column(new Label(style('font-weight: bold;'), new TextRender('Name'))),            new Column(new Label(style('font-weight: bold;'), new TextRender('Date Added')))        ));        foreach ($consigners as $consigner) {            $list->add_object(new Row(                new Column(style('padding-bottom: 0px'),                    new Form(method('post').action('admin.php?page=sales_console_consigners'),                        new Input(id(consigner_request::$back_to_book).name(consigner_request::$back_to_book).type('hidden').value('admin.php?page=library_breakdown')),                        selection::InputBook($id),                        selection::InputConsigner($consigner),                        page_action::InputAction(action_types::$select_consigner),                        book_request::Store(),                        new Input(classType('button').type('submit').name('button').value(get_the_title($consigner)).style('background:none!important; border:none;                             padding:0!important; font-family:arial,sans-serif; color:#069; box-shadow: 0 0px 0 #ccc; cursor:pointer;'))                    )                ),                new Column(new TextRender(consigner_properties::get_consigner_date($consigner)))            ));        }    }    return $list;}function book_display($display, $id, $consignerID) {    $row = new Row();    if (array_key_exists(book_properties::$title, $display)){        if (array_key_exists(book_properties::$selectable, $display)){            $row->add_object(new Column(                new Form(method('POST').name('select_book'),                    selection::InputBook($id),                    book_request::Store(),                    page_action::InputAction(action_types::$select_book),                    new Input(classType('button').type('submit').name('button').value(get_the_title($id)).style('background:none!important; border:none;                         padding:0!important; font-family:arial,sans-serif; color:#069; box-shadow: 0 0px 0 #ccc; cursor:pointer;'))                )            ));        }        else {            $row->add_object(new Column(                new TextRender(book_properties::get_book_title($id))            ));        }    }    if (array_key_exists(book_properties::$barcode, $display)){        $row->add_object(new Column(            new TextRender(book_properties::get_book_barcode($id))        ));    }    if (array_key_exists(book_properties::$publisher, $display)){        $row->add_object(new Column(            new TextRender(book_properties::get_book_publisher($id))        ));    }    if (array_key_exists(book_properties::$isbn, $display)){        $row->add_object(new Column(            new TextRender(book_properties::get_book_isbn($id))        ));    }    if (array_key_exists(book_properties::$cost, $display)){        $row->add_object(new Column(            new TextRender('$'.book_properties::get_book_cost($id))        ));    }    if (array_key_exists(book_properties::$MSRP, $display)){        $row->add_object(new Column(            new TextRender('$'.book_properties::get_book_msrp($id))        ));    }    if (array_key_exists(book_properties::$price, $display)){        $row->add_object(new Column(            new TextRender('$'.book_properties::get_book_saleprice($id))        ));    }    if (array_key_exists(book_properties::$quantity, $display)){        $row->add_object(new Column(align('center'),            new TextRender(book_properties::get_consigner_count($id))        ));    }    if (array_key_exists(book_properties::$condition, $display)){        $row->add_object(new Column(align('center'),            new TextRender(book_properties::get_book_condition($id))        ));    }    if (array_key_exists(book_properties::$availability, $display)){        $row->add_object(new Column(align('center'),            new TextRender(book_properties::get_book_availablity($id))        ));    }    if (array_key_exists(book_properties::$perm_availability, $display)){        $online = book_properties::get_book_perm_availability($id);        if ($online) $ret = 'Yes';        else $ret = 'No';        $row->add_object(new Column(align('center'),            new TextRender($ret)        ));    }    if (array_key_exists(book_properties::$hasimage, $display)){        $row->add_object(            new Column(width(5).align('center'),                book_properties::get_image_form($id, action_types::$add_image_to_book_search)            )        );    }    if (array_key_exists(book_properties::$consigner_id, $display)){        $row->add_object(            new Column(width(5).align('center'),                new Form(                    page_action::InputAction(action_types::$add_book_to_consigner),                    book_request::Store(),                    consigner_request::Store(),                    selection::InputBook($id),                    selection::InputConsigner($consignerID),                    button('Add')                )            )        );    }    return $row;}function GetUsedNewRadio($usedValue) {    $column = new Column(style('padding-left: 5px;').width(60));    $column->add_object(        new Input(type('radio').name(book_request::$condition).value('New')));    $column->add_object(new TextRender('New '));    if ($usedValue) {        $column->add_object(            new Input(type('radio').name(book_request::$condition).value('Used').checkedAttr('true')));        $column->add_object(new TextRender('Used '));    }    else {        $column->add_object(            new Input(type('radio').name(book_request::$condition).value('Used')));        $column->add_object(new TextRender('Used '));    }    return $column;}function media_selector_print_scripts() {    ?><script type='text/javascript'>        jQuery( document ).ready( function( $ ) {            var file_frame;            jQuery('.upload_image_button').on('click', function( event ){                var element = event.srcElement;                var post_id = event.srcElement.id;                var parent = element.parentElement;                event.preventDefault();                if ( file_frame ) {                    file_frame.open();                    return;                }                // Create the media frame.                file_frame = wp.media.frames.file_frame = wp.media({                    title: 'Select a image to upload',                    button: {                        text: 'Use this image',                    },                    multiple: false	// Set to true to allow multiple files to be selected                });                // When an image is selected, run a callback.                file_frame.on( 'select', function() {                    // We set multiple to false so only get one image from the uploader                    attachment = file_frame.state().get('selection').first().toJSON();                    attach = parent.elements["image_attachment_id"];                    attach.value = attachment.id;                    parent.submit();                });                // Finally, open the modal                file_frame.open();            });        });    </script><?php}?>