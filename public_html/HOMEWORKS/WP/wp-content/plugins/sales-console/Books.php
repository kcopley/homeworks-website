<?phpinclude_once "includes.php";selection::GetPages(vars::$library_page);selection::GetIDS();if ($_REQUEST['reset_query_'.Book::$source]) ResetQuery(Book::$props);//Enqueue the JS scriptswp_enqueue_media();//Generate the top search / add book sectionBook::GenerateSearchAndAdd()->Render();global $wpdb;switch (page_action::GetAction()) {    case action_types::get_search(Book::$source):        $_SESSION[action_types::$consigner_books] = false;        page_action::SetNewAction(action_types::get_search(Book::$source));        StoreQuery(Book::$props);        GenerateSearch(Book::$props, Book::$source, Book::$post_type)->Render();        break;    case action_types::add_image(Book::$source):        add_image(selection::GetID(Book::$source));        page_action::SetNewAction(action_types::get_search(Book::$source));        GenerateSearch(Book::$props, Book::$source, Book::$post_type)->Render();        break;    case action_types::get_select(Book::$source):        page_action::SetNewAction(action_types::get_select(Book::$source));        Book::SelectBook(selection::GetID(Book::$source))->Render();        break;    case action_types::get_add(Book::$source):        $id = Add(Book::$props, Book::$source, Book::$post_type);        page_action::SetNewAction(action_types::get_select(Book::$source));        Book::SelectBook(selection::GetID(Book::$source))->Render();        break;    case action_types::get_update(Book::$source):        Update(Book::$props, selection::GetID(Book::$source));        page_action::SetNewAction(action_types::get_select(Book::$source));        Book::SelectBook(selection::GetID(Book::$source))->Render();        break;    case action_types::$add_book_to_owner:        Add(Book::$props, Book::$source, Book::$post_type);        Book::SelectBook(selection::GetID(Book::$source))->Render();        break;    case action_types::get_delete(Book::$source):        $_POST[action_types::$delete_sure] = true;        page_action::SetNewAction(action_types::get_select(Book::$source));        Book::SelectBook(selection::GetID(Book::$source))->Render();        break;    case action_types::get_delete_sure(Book::$source):        Remove(Book::$source, selection::GetID(Book::$source));        page_action::SetNewAction(action_types::get_search(Book::$source));        GenerateSearch(Book::$props, Book::$source, Book::$post_type)->Render();        break;    default:        selection::ResetPages(vars::$library_page);};//Add the scripts to the pagemedia_selector_print_scripts();function media_selector_print_scripts() {    ?><script type='text/javascript'>        jQuery(document).ready( function($) {            var file_frame;            jQuery('.upload_image_button').on('click', function( event ){                var element = event.srcElement;                var post_id = event.srcElement.id;                var parent = element.parentElement;                event.preventDefault();                if ( file_frame ) {                    file_frame.open();                    return;                }                // Create the media frame.                file_frame = wp.media.frames.file_frame = wp.media({                    title: 'Select a image to upload',                    button: {                        text: 'Use this image',                    },                    multiple: false	// Set to true to allow multiple files to be selected                });                // When an image is selected, run a callback.                file_frame.on( 'select', function() {                    // We set multiple to false so only get one image from the uploader                    attachment = file_frame.state().get('selection').first().toJSON();                    attach = parent.elements["image_attachment_id"];                    attach.value = attachment.id;                    parent.submit();                });                // Finally, open the modal                file_frame.open();            });        });    </script><?php}?>