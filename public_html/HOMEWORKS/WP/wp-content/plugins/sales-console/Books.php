<?phpinclude_once "includes.php";//Enqueue the JS scriptswp_enqueue_media();//Generate the top search / add book sectionBook::GenerateSearchAndAdd()->Render();global $wpdb;switch (page_action::GetAction()) {    case action_types::$search_books:        search_books($library_search)->Render();        break;    case action_types::$add_image_to_book_search:        add_image(selection::GetBook());        search_books($library_search)->Render();        break;    case action_types::$add_image_to_book_edit:        add_image(selection::GetBook());        select_book(selection::GetBook())->Render();        break;    case action_types::$select_book:        select_book(selection::GetBook())->Render();        break;    case action_types::$add_book:        $id = book_addition::add_book();        select_book($id)->Render();        break;    case action_types::$change_book:        if (isset($_POST[action_types::$edit_book])) {            book_editing::update_book(selection::GetBook());            select_book(selection::GetBook())->Render();        } else if (isset($_POST[action_types::$delete_book])) {            select_book(selection::GetBook())->Render();        } else if (isset($_POST[action_types::$delete_book_sure])){            book_editing::delete_book(selection::GetBook());            search_books($library_search)->Render();        }        break;    case action_types::$add_book_to_owner:        book_properties::add_book(selection::GetBook(), consigner_properties::get_owner());        select_book(selection::GetBook())->Render();        break;};//Add the scripts to the pagemedia_selector_print_scripts();function select_book($id) {    $form = new Form(method('post').id('edit_book_form'));    return new TableArr(id('formtable').width(100).border(0).cellspacing(0).cellpadding(0).style('margin: 10px 0 50px;'),        $form,        new Row(            new Column(width(24).align('left'), new TextRender('Title')),            new Column(align('left'), new TextRender('ISBN')),            new Column(align('left'), new TextRender('Publisher')),            new Column(align('left'), new TextRender('Cost')),            new Column(align('left'), new TextRender('Retail Price')),            new Column(align('left'), new TextRender('Sale Price')),            new Column(align('center').width(6), new TextRender('Barcode')),            new Column(align('left'), new TextRender('Condition')),            new Column(align('left'), new TextRender('Availability')),            new Column(align('left'), new TextRender('Online Availability')),            new Column(align('left').style('padding-right: 15px; padding-left: 15px;'), new TextRender('Quantity')),            new Column(align('center').width(5), new TextRender('Image?'))        ),        new Row(            new Column(align('left'),                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$title).id(book_editing::$title).type('text').value(book_properties::get_book_title($id)))),            new Column(                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$isbn).id(book_editing::$isbn).type('text').value(book_properties::get_book_isbn($id)))),            new Column(                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$publisher).id(book_editing::$publisher).type('text').value(book_properties::get_book_publisher($id)))),            new Column(                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$cost).id(book_editing::$cost).type('text').value(book_properties::get_book_cost($id)))),            new Column(                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$MSRP).id(book_editing::$MSRP).type('text').value(book_properties::get_book_msrp($id)))),            new Column(                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$price).id(book_editing::$price).type('text').value(book_properties::get_book_saleprice($id)))),            new Column(                new H4(align('center').style('width: 100%; padding: 6px 4px 6px;'), new TextRender(book_properties::get_book_barcode($id)))),            new Column(                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$condition).id(book_editing::$condition).type('text').value(book_properties::get_book_condition($id)))),            new Column(                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$availability).id(book_editing::$availability).type('text').value(book_properties::get_book_availablity($id)))),            new Column(                new Input(form('edit_book_form').style('width: 96%; padding: 6px 4px 6px;'), name(book_editing::$perm_availability).id(book_editing::$perm_availability).type('checkbox').value(book_properties::get_book_perm_availablity($id)))),            new Column(align('center'),                new TextRender(book_properties::get_consigner_count($id))),            new Column(align('center'),                book_properties::get_image_form($id, action_types::$add_image_to_book_edit)            )        ),        new Row(            new Column(style('padding-top: 16px; padding-bottom: 8px;'),                new TableArr(id('consignertable').width(100).border(0).cellspacing(0).cellpadding(0),                    GetConsigners($id)                )            )        ),        new Row(            new Column(                new Form(method('post'),                    page_action::InputAction(action_types::$add_book_to_owner),                    selection::InputBook($id),                    book_request::Store(),                    button('Add Book to Owner')                )            )        ),        new Row(            new Column(colspan(11)),            new Column(GetDeleteMessage())        ),        new Row(            new Column(colspan(10), new HR()),            new Column(                new Input(form('edit_book_form').id(page_action::$action).name(page_action::$action).type('hidden').value(action_types::$change_book)),                book_request::Store('edit_book_form'),                new Input(form('edit_book_form').id(selection::$book).type('hidden').name(selection::$book).value($id)),                new Input(form('edit_book_form').classType('button-primary').type('submit').name(action_types::$edit_book).value('Update'))            ),            new Column(                new Input(form('edit_book_form').classType('button-primary').type('submit').name(GetDeleteType()).value('Delete'))            )        ),        new Row(            new Column(                new Form(method('post'),                    page_action::InputAction(action_types::$search_books),                    book_request::Store(),                    button('Back to Search Results')                )            )        )    );}function GetDeleteMessage() {    if (isset($_POST[action_types::$delete_book])) {        return new TextRender('Are you sure? Press delete again to confirm.');    }    else return new TextRender();}function GetDeleteType() {    if (isset($_POST[action_types::$delete_book])) {        return action_types::$delete_book_sure;    }    else return action_types::$delete_book;}function GetConsigners($id) {    $list = new RenderList();    $consigners = book_properties::get_consigners($id);    if (count($consigners) > 0) {        $list->add_object(new Row(            new Column(new Label(style('font-weight: bold;'), new TextRender('Name'))),            new Column(new Label(style('font-weight: bold;'), new TextRender('Date Added')))        ));        foreach ($consigners as $consigner) {            $list->add_object(new Row(                new Column(style('padding-bottom: 0px'),                    new Form(method('post').action('admin.php?page=sales_console_consigners'),                        new Input(id(consigner_request::$back_to_book).name(consigner_request::$back_to_book).type('hidden').value('admin.php?page=library_breakdown')),                        selection::InputBook($id),                        selection::InputConsigner($consigner),                        page_action::InputAction(action_types::$select_consigner),                        book_request::Store(),                        new Input(classType('button').type('submit').name('button').value(get_the_title($consigner)).style('background:none!important; border:none;                             padding:0!important; font-family:arial,sans-serif; color:#069; box-shadow: 0 0px 0 #ccc; cursor:pointer;'))                    )                ),                new Column(new TextRender(consigner_properties::get_consigner_date($consigner)))            ));        }    }    return $list;}class book_request {    public static $title = 'query_title';    public static $barcode = 'query_barcode';    public static $isbn = 'query_isbn';    public static $publisher = 'query_publisher';    public static $price = 'query_price';    public static $department = 'query_department';    public static $availability = 'query_availability';    public static $perm_availability = 'query_perm_availability';    public static $condition = 'query_condition';    public static $image_set = 'image_attachment_id';    public static $books_per_page = 'books_per_page_count';    public static $current_page = 'current_book_page';    public static function InputTitle() {        return new Input(id(book_request::$title).name(book_request::$title).type('text'));    }    public static function GetTitle() {        return $_REQUEST[book_request::$title];    }    public static function InputBarcode() {        return new Input(id(book_request::$barcode).name(book_request::$barcode).type('text'));    }    public static function GetBarcode() {        return $_REQUEST[book_request::$barcode];    }    public static function InputISBN() {        return new Input(id(book_request::$isbn).name(book_request::$isbn).type('text'));    }    public static function GetISBN() {        return $_REQUEST[book_request::$isbn];    }    public static function InputPublisher() {        return new Input(id(book_request::$publisher).name(book_request::$publisher).type('text'));    }    public static function GetPublisher() {        return $_REQUEST[book_request::$publisher];    }    public static function InputPrice() {        return new Input(id(book_request::$price).name(book_request::$price).type('text'));    }    public static function GetPrice() {        return $_REQUEST[book_request::$price];    }    public static function GetDepartment() {        return $_REQUEST[book_request::$department];    }    public static function GetAvailability() {        return $_REQUEST[book_request::$availability];    }    public static function GetPermAvailability() {        return $_REQUEST[book_request::$perm_availability];    }    public static function GetCondition(){        return $_REQUEST[book_request::$condition];    }    public static function GetBooksPerPage() {        if ($_REQUEST[book_request::$books_per_page]){            $_SESSION[book_request::$books_per_page] = $_REQUEST[book_request::$books_per_page];            return $_REQUEST[book_request::$books_per_page];        }        else if ($_SESSION[book_request::$books_per_page]){            return $_SESSION[book_request::$books_per_page];        }        else return 25;    }    public static function InputBooksPerPage() {        return new Input(id(book_request::$books_per_page).name(book_request::$books_per_page).type('text').value(self::GetBooksPerPage()));    }    public static function GetCurrentPage() {        return $_REQUEST[book_request::$current_page];    }    public static function InputCurrentPage($value) {        return new Input(id(book_request::$current_page).name(book_request::$current_page).type('hidden').value($value));    }    public static function Store() {        $args = func_get_args();        $form = '';        if (count($args) > 0){            $form = $args[0];        }        if (!empty($form)){            $list = new RenderList(                new Input(form($form).id(book_request::$department).name(book_request::$department).type('hidden').value(self::GetDepartment())),                new Input(form($form).id(book_request::$condition).name(book_request::$condition).type('hidden').value(self::GetCondition())),                new Input(form($form).id(book_request::$price).name(book_request::$price).type('hidden').value(self::GetPrice())),                new Input(form($form).id(book_request::$perm_availability).name(book_request::$perm_availability).type('hidden').value(self::GetPermAvailability())),                new Input(form($form).id(book_request::$availability).name(book_request::$availability).type('hidden').value(self::GetAvailability())),                new Input(form($form).id(book_request::$publisher).name(book_request::$publisher).type('hidden').value(self::GetPublisher())),                new Input(form($form).id(book_request::$title).name(book_request::$title).type('hidden').value(self::GetTitle())),                new Input(form($form).id(book_request::$barcode).name(book_request::$barcode).type('hidden').value(self::GetBarcode())),                new Input(form($form).id(book_request::$isbn).name(book_request::$isbn).type('hidden').value(self::GetISBN())),                new Input(form($form).id(book_request::$books_per_page).name(book_request::$books_per_page).type('hidden').value(self::GetBooksPerPage()))            );        }        else {            $list = new RenderList(                new Input(id(book_request::$department).name(book_request::$department).type('hidden').value(self::GetDepartment())),                new Input(id(book_request::$condition).name(book_request::$condition).type('hidden').value(self::GetCondition())),                new Input(id(book_request::$price).name(book_request::$price).type('hidden').value(self::GetPrice())),                new Input(id(book_request::$availability).name(book_request::$availability).type('hidden').value(self::GetAvailability())),                new Input(id(book_request::$perm_availability).name(book_request::$perm_availability).type('hidden').value(self::GetPermAvailability())),                new Input(id(book_request::$publisher).name(book_request::$publisher).type('hidden').value(self::GetPublisher())),                new Input(id(book_request::$title).name(book_request::$title).type('hidden').value(self::GetTitle())),                new Input(id(book_request::$barcode).name(book_request::$barcode).type('hidden').value(self::GetBarcode())),                new Input(id(book_request::$isbn).name(book_request::$isbn).type('hidden').value(self::GetISBN())),                new Input(id(book_request::$books_per_page).name(book_request::$books_per_page).type('hidden').value(self::GetBooksPerPage()))            );        }        return $list;    }}class book_editing{    public static $title = 'edit_title';    public static $cost = 'edit_cost';    public static $price = 'edit_price';    public static $MSRP = 'edit_MSRP';    public static $publisher = 'edit_publisher';    public static $isbn = 'edit_isbn';    public static $condition = 'edit_condition';    public static $availability = 'edit_availability';    public static $perm_availability = 'edit_perm_availability';    public static $barcode = 'edit_barcode';    public static function GetTitle() {        return $_REQUEST[book_editing::$title];    }    public static function GetCost() {        return $_REQUEST[book_editing::$cost];    }    public static function GetPrice() {        return $_REQUEST[book_editing::$price];    }    public static function GetMSRP() {        return $_REQUEST[book_editing::$MSRP];    }    public static function GetPublisher() {        return $_REQUEST[book_editing::$publisher];    }    public static function GetISBN() {        return $_REQUEST[book_editing::$isbn];    }    public static function GetCondition() {        return $_REQUEST[book_editing::$condition];    }    public static function GetAvailability() {        return $_REQUEST[book_editing::$availability];    }    public static function GetPermAvailability() {        return $_REQUEST[book_editing::$perm_availability];    }    public static function GetBarcode() {        return $_REQUEST[book_editing::$barcode];    }    public static function update_book($product_id) {        //Get the input data from form        $booktitle = book_editing::GetTitle();        $cost = book_editing::GetCost();        $price = book_editing::GetPrice();        $MSRP = book_editing::GetMSRP();        $vendor = book_editing::GetPublisher();        $condition = book_editing::GetCondition();        $newISBN = book_editing::GetISBN();        $barcode = book_editing::GetBarcode();        $available = book_editing::GetAvailability();        $online = book_editing::GetPermAvailability();        if ($booktitle) {            $titleupdate = array(                'ID' => $product_id,                'post_title' => $booktitle,            );            wp_update_post($titleupdate);        }        if ($cost) book_properties::set_book_cost($product_id, $cost);        if ($price) book_properties::set_book_saleprice($product_id, $price);        if ($MSRP) book_properties::set_book_msrp($product_id, $MSRP);        if ($vendor) book_properties::set_book_publisher($product_id, $vendor);        if ($barcode) book_properties::set_book_barcode($product_id, $barcode);        if ($newISBN) book_properties::set_book_sku($product_id, $newISBN);        if ($condition) book_properties::set_book_condition($product_id, $condition);        if ($available) book_properties::set_book_availablity($product_id, $available);        if ($online) book_properties::set_book_perm_availablity($product_id, $online);    }    public static function delete_book($product_id) {        $consigners = book_properties::get_consigners($product_id);        if (!empty($consigners)) {            foreach ($consigners as $consigner) {                $consigner_book_list = consigner_properties::get_books($consigner);                if (!empty($consigner_book_list)) {                    $temparr = array();                    foreach ($consigner_book_list as $book) {                        if ($product_id != $book) {                            $temparr[] = $book;                        }                    }                    consigner_properties::set_books($consigner, $temparr);                }            }        }        wp_delete_post($product_id);    }}class book_addition {    public static $title = 'add_title';    public static $barcode = 'add_barcode';    public static $isbn = 'add_isbn';    public static $publisher = 'add_publisher';    public static $price = 'add_price';    public static $cost = 'add_cost';    public static $msrp = 'add_msrp';    public static $department = 'add_department';    public static $availability = 'add_availability';    public static $condition = 'add_condition';    public static $quantity = 'add_quantity';    public static function GetCondition() {        return $_REQUEST[book_addition::$condition];    }    public static function GetAvailability() {        return $_REQUEST[book_addition::$availability];    }    public static function GetDepartment() {        return $_REQUEST[book_addition::$department];    }    public static function InputTitle() {        return new Input(id(book_addition::$title).name(book_addition::$title).type('text'));    }    public static function GetTitle() {        return $_REQUEST[book_addition::$title];    }    public static function InputBarcode() {        return new Input(id(book_addition::$barcode).name(book_addition::$barcode).type('text'));    }    public static function GetBarcode() {        return $_REQUEST[book_addition::$barcode];    }    public static function InputISBN() {        return new Input(id(book_addition::$isbn).name(book_addition::$isbn).type('text'));    }    public static function GetISBN() {        return $_REQUEST[book_addition::$isbn];    }    public static function InputPublisher() {        return new Input(id(book_addition::$publisher).name(book_addition::$publisher).type('text').value(book_request::GetPublisher()));    }    public static function GetPublisher() {        return $_REQUEST[book_addition::$publisher];    }    public static function InputPrice() {        return new Input(id(book_addition::$price).name(book_addition::$price).type('text'));    }    public static function GetPrice() {        return $_REQUEST[book_addition::$price];    }    public static function InputMSRP() {        return new Input(id(book_addition::$msrp).name(book_addition::$msrp).type('text'));    }    public static function GetMSRP() {        return $_REQUEST[book_addition::$msrp];    }    public static function InputCost() {        return new Input(id(book_addition::$cost).name(book_addition::$cost).type('text'));    }    public static function GetCost() {        return $_REQUEST[book_addition::$cost];    }    public static function InputQuantity() {        return new Input(id(book_addition::$quantity).name(book_addition::$quantity).type('text'));    }    public static function GetQuantity() {        return $_REQUEST[book_addition::$quantity];    }    public static function add_book_post($booktitle, $bookcategory) {        //Set up barcode        $lastBarcodeExists = get_option('_cmb_resource_lastBarcode');        $lastBarcode = 15000;        if ($lastBarcodeExists == false){            add_option('_cmb_resource_lastBarcode', 15000);            $lastBarcode = get_option('_cmb_resource_lastBarcode');        }        $newbarcode = $lastBarcode + 1;        update_option('_cmb_resource_lastBarcode', $newbarcode);        $order = array(            'post_title' => $booktitle,            'post_status' => 'publish',            'post_author' => 4,            'post_category' => array(                $bookcategory            ),            'post_type' => 'bookstore'        );        $postid = wp_insert_post($order);        book_properties::set_book_barcode($postid, $newbarcode);        return $postid;    }    public static function add_book() {        $postid = book_addition::add_book_post(book_addition::GetTitle(), book_addition::GetDepartment());        book_properties::set_book_sku($postid, book_addition::GetISBN());        book_properties::set_book_cost($postid, book_addition::GetCost());        book_properties::set_book_condition($postid, book_addition::GetCondition());        book_properties::set_book_msrp($postid, book_addition::GetMSRP());        book_properties::set_book_publisher($postid, book_addition::GetPublisher());        book_properties::set_book_saleprice($postid, book_addition::GetPrice());        $online = book_addition::GetAvailability();        if ($online) {            book_properties::set_book_perm_availablity($postid, book_addition::GetAvailability());        }        for ($i = 0; $i < book_addition::GetQuantity(); $i++) {            book_properties::add_book($postid, get_consigner_owner_id());        }        return $postid;    }}function GetAdditionalRenders($additionalRenders) {    if ($additionalRenders != null) {        return $additionalRenders;    }    return new RenderList();}function book_display($display, $id, $consignerID) {    $row = new Row();    if (array_key_exists(book_properties::$title, $display)){        if (array_key_exists(book_properties::$selectable, $display)){            $row->add_object(new Column(                new Form(method('POST').name('select_book'),                    selection::InputBook($id),                    book_request::Store(),                    page_action::InputAction(action_types::$select_book),                    new Input(classType('button').type('submit').name('button').value(get_the_title($id)).style('background:none!important; border:none;                         padding:0!important; font-family:arial,sans-serif; color:#069; box-shadow: 0 0px 0 #ccc; cursor:pointer;'))                )            ));        }        else {            $row->add_object(new Column(                new TextRender(book_properties::get_book_title($id))            ));        }    }    if (array_key_exists(book_properties::$barcode, $display)){        $row->add_object(new Column(            new TextRender(book_properties::get_book_barcode($id))        ));    }    if (array_key_exists(book_properties::$publisher, $display)){        $row->add_object(new Column(            new TextRender(book_properties::get_book_publisher($id))        ));    }    if (array_key_exists(book_properties::$isbn, $display)){        $row->add_object(new Column(            new TextRender(book_properties::get_book_isbn($id))        ));    }    if (array_key_exists(book_properties::$cost, $display)){        $row->add_object(new Column(            new TextRender('$'.book_properties::get_book_cost($id))        ));    }    if (array_key_exists(book_properties::$MSRP, $display)){        $row->add_object(new Column(            new TextRender('$'.book_properties::get_book_msrp($id))        ));    }    if (array_key_exists(book_properties::$price, $display)){        $row->add_object(new Column(            new TextRender('$'.book_properties::get_book_saleprice($id))        ));    }    if (array_key_exists(book_properties::$quantity, $display)){        $row->add_object(new Column(align('center'),            new TextRender(book_properties::get_consigner_count($id))        ));    }    if (array_key_exists(book_properties::$condition, $display)){        $row->add_object(new Column(align('center'),            new TextRender(book_properties::get_book_condition($id))        ));    }    if (array_key_exists(book_properties::$availability, $display)){        $row->add_object(new Column(align('center'),            new TextRender(book_properties::get_book_availablity($id))        ));    }    if (array_key_exists(book_properties::$perm_availability, $display)){        $online = book_properties::get_book_perm_availability($id);        if ($online) $ret = 'Yes';        else $ret = 'No';        $row->add_object(new Column(align('center'),            new TextRender($ret)        ));    }    if (array_key_exists(book_properties::$hasimage, $display)){        $row->add_object(            new Column(width(5).align('center'),                book_properties::get_image_form($id, action_types::$add_image_to_book_search)            )        );    }    if (array_key_exists(book_properties::$consigner_id, $display)){        $row->add_object(            new Column(width(5).align('center'),                new Form(                    page_action::InputAction(action_types::$add_book_to_consigner),                    book_request::Store(),                    consigner_request::Store(),                    selection::InputBook($id),                    selection::InputConsigner($consignerID),                    button('Add')                )            )        );    }    return $row;}function GetUsedNewRadio($usedValue) {    $column = new Column(style('padding-left: 5px;').width(60));    $column->add_object(        new Input(type('radio').name(book_request::$condition).value('New')));    $column->add_object(new TextRender('New '));    if ($usedValue) {        $column->add_object(            new Input(type('radio').name(book_request::$condition).value('Used').checkedAttr('true')));        $column->add_object(new TextRender('Used '));    }    else {        $column->add_object(            new Input(type('radio').name(book_request::$condition).value('Used')));        $column->add_object(new TextRender('Used '));    }    return $column;}function media_selector_print_scripts() {    ?><script type='text/javascript'>        jQuery( document ).ready( function( $ ) {            var file_frame;            jQuery('.upload_image_button').on('click', function( event ){                var element = event.srcElement;                var post_id = event.srcElement.id;                var parent = element.parentElement;                event.preventDefault();                if ( file_frame ) {                    file_frame.open();                    return;                }                // Create the media frame.                file_frame = wp.media.frames.file_frame = wp.media({                    title: 'Select a image to upload',                    button: {                        text: 'Use this image',                    },                    multiple: false	// Set to true to allow multiple files to be selected                });                // When an image is selected, run a callback.                file_frame.on( 'select', function() {                    // We set multiple to false so only get one image from the uploader                    attachment = file_frame.state().get('selection').first().toJSON();                    attach = parent.elements["image_attachment_id"];                    attach.value = attachment.id;                    parent.submit();                });                // Finally, open the modal                file_frame.open();            });        });    </script><?php}?>