<?phpinclude_once 'bookmethods.php';include_once "includes.php";switch (page_action::GetAction()){    case action_types::$add_item_checkout:        checkout_cart::add_book(checkout_request::GetBarcode(), checkout_request::GetISBN(), checkout_request::GetQuantity());        break;    case action_types::$add_credit_checkout:        if (checkout_request::GetCreditAmount() != -1) {            checkout_cart::add_credit(checkout_request::GetCreditName(), checkout_request::GetCreditAmount());        }        break;    case action_types::$remove_item_checkout:        checkout_cart::remove_book_from_cart(selection::GetBook(), checkout_request::GetRemoveQuantity());        break;    case action_types::$remove_credit_checkout:        checkout_cart::remove_credit(checkout_request::GetCreditIndex());        break;    case action_types::$clear_checkout_cart:        checkout_cart::clear_all();        break;    case action_types::$clear_checkout_credit:        checkout_cart::clear_credit();        break;    case action_types::$process_payment:        if (checkout_payment::GetPaymentType() == checkout_payment::$payment_credit) {            $successful = process_auth();            if (!$successful) break;        }        $paid = checkout_payment::GetAmountPaid();        $currentPaid = checkout_payment::GetTotalAmountPaid();        $totalPaid = $currentPaid + $paid;        checkout_payment::SetTotalAmountPaid($totalPaid);        create_transaction($paid);        break;    case action_types::$pre_card_submission:        break;    case action_types::$clear_checkout:        checkout_cart::clear_all();        unset($_SESSION[checkout_payment::$current_transaction_id]);        unset($_SESSION[checkout_payment::$total_amount_paid]);        break;}$table = new TableArr(border(0).cellpadding(0).cellspacing(0).width(100), //global page table    new Row(        new Column(width(78).valign('top'),            get_books_and_credit()        ),        new Column(width(1).style('border-right: solid; border-width: 1px; border-color: #D0D0D0;')),        new Column(width(1)),        new Column(width(20).valign('top'),            get_payments()        )    ));wp_enqueue_media();$table->Render();insert_scripts();function get_paid_message() {    if (checkout_payment::GetAmountPaid() > 0) {        $type = checkout_payment::GetPaymentType();        if ($type == checkout_payment::$payment_cash){            return new H4(new TextRender('Cash Payment Received.'));        }        else if ($type == checkout_payment::$payment_credit){            return new H4(new TextRender('Payment received at TransFirst/Transaction Central.'));        }        else if ($type == checkout_payment::$payment_check){            return new H4(new TextRender('Check Payment Received.'));        }        else if ($type == checkout_payment::$payment_phone){            return new H4(new TextRender('Payment handled by phone.'));        }    }}function get_paid_formatting() {    if (checkout_payment::GetTotalAmountPaid() > 0) return new H4(style('margin: 0px;'), new Strong(new TextRender('Paid: $'.number_format(checkout_payment::GetTotalAmountPaid(), 2))));    else return new RenderList();}function get_refund_formatting() {    if (checkout_payment::GetRefund() > 0) return new H4(style('margin: 0px;'), new Strong(new TextRender('Refund: $'.number_format(checkout_payment::GetRefund(), 2))));    else return new H4(style('margin: 0px;'), new Strong(new TextRender('Due: $'.number_format(get_total() - checkout_payment::GetTotalAmountPaid(), 2))));}function get_payments() {    return new TableArr(border(0).cellpadding(0).cellspacing(0).width(100), //right side (totals/payment) table        new Row(            new Column(style('padding-top: 16px; font-size: 16px; font-weight: bold;').valign('top'),                get_paid_message(),                get_paid_formatting(),                get_refund_formatting()            )        ),        new Row(            new Column(valign('top'),                new Paragraph(id(checkout_payment::$payment_type),                    new Strong(new TextRender('Payment Type:')),                    new BR(),                    new Input(type('radio').name(checkout_payment::$payment_type).id(checkout_payment::$payment_cash).value(checkout_payment::$payment_cash)),                    new TextRender(' Cash'),                    new BR(),                    new Input(type('radio').name(checkout_payment::$payment_type).id(checkout_payment::$payment_check).value(checkout_payment::$payment_check)),                    new TextRender(' Check'),                    new BR(),                    new Input(type('radio').name(checkout_payment::$payment_type).id(checkout_payment::$payment_phone).value(checkout_payment::$payment_phone)),                    new TextRender(' Phone'),                    new BR(),                    new Input(type('radio').name(checkout_payment::$payment_type).id(checkout_payment::$payment_credit).value(checkout_payment::$payment_credit)),                    new TextRender(' Credit')                )            )        ),        new Row(            new Column(                new H4(new TextRender('Payment Info:')),                verify_customer_card_info(),                transfirst_submission(),                get_payment_info()            )        ),        new Row(            new Column(                new Form(                    page_action::InputAction(action_types::$clear_checkout),                    button('Clear Transaction')                )            )        )    );}function verify_customer_card_info() {    $renderlist = new RenderList();    if (page_action::GetAction() == action_types::$pre_card_submission) {        $renderlist->add_object(            new H4(new TextRender('Verify Customer Information'))        );        $renderlist->add_object(            new Paragraph(                new Strong(new TextRender('Name:')),                new TextRender(checkout_payment::GetName()),                new Strong(new TextRender('Email:')),                new TextRender(checkout_payment::GetEmail()),                new Strong(new TextRender('Billing Address:')),                new TextRender(checkout_payment::GetAddress()),                new TextRender(checkout_payment::GetCity()),                new TextRender(get_state_comma(checkout_payment::GetState())),                new TextRender(checkout_payment::GetState()),                new TextRender(checkout_payment::GetZip())            )        );    }    return $renderlist;}function transfirst_submission() {    $form = new RenderList();    if (page_action::GetAction() == action_types::$pre_card_submission) {        $form = new Form(id('TRANSFIRST').action("https://webservices.primerchants.com/billing/TransactionCentral/processCC.asp?").name('frmReturn').id('frmReturn'),            new Input(type('hidden').name('MerchantID').id('100846').value(get_option('merchantid'))),            new Input(type('hidden').name('RegKey').id('5QJ6J3H3YSYZAAZA').value(get_option('regkey'))),            new Input(type('hidden').name('CCRURL').value(admin_url('admin.php?page=conference-sales&', 'https'))),            new Input(type('hidden').name('ConfirmPage').value('Y')),            new Input(type('hidden').name('RefID').value(checkout_payment::GetTransactionID())),            new Input(type('hidden').name('Amount').value(checkout_payment::GetAmountPaid())),            new Input(type('hidden').name('TaxAmount').value(get_paid_amount_tax_total())),            new Input(type('hidden').name('TaxIndicator').value(1)),            new Input(type('hidden').name('NameonAccount').value(checkout_payment::GetName())),            new Input(type('hidden').name('AccountNo').value(checkout_payment::GetCardNumber())),            new Input(type('hidden').name('CCMonth').value(checkout_payment::GetCardExpirationMonth())),            new Input(type('hidden').name('CCYear').value(checkout_payment::GetCardExpirationYear())),            new Input(type('hidden').name('CVV2').value(checkout_payment::GetCardVerification())),            new Input(type('hidden').name('AVSADDR').value(checkout_payment::GetAddress())),            new Input(type('hidden').name('AVSZIP').value(checkout_payment::GetZip())),            new Input(type('hidden').name('ShipToZipCode').value(checkout_payment::GetZip())),            new Input(type('hidden').name('USER1').value('credit')),            new Input(classType('button-primary').type('submit').value('Process Credit Payment'))        );    }    return $form;}function get_payment_info() {    $list = new RenderList(        get_customer_cash_info(),        get_customer_check_info(),        get_customer_credit_info(),        get_customer_phone_info()    );    return $list;}function process_auth() {    if ($_REQUEST[request_sales_Auth()] == sales_AuthCodeDeclined()) {        $cw2 = $_REQUEST[request_sales_CCResponse()];        if ($cw2 == sales_purchase_error()) {            $render = new RenderList(                new H4(new TextRender('Purchase Error')),                new H4(new TextRender('There was an error processing the order.'))            );            $render->Render();        }        else if ($cw2 == sales_incorrect_number()) {            $render = new RenderList(                new H4(new TextRender('Card Error')),                new H4(new TextRender('Credit card information does not match.'))            );            $render->Render();        }        else {            $render = new RenderList(                new H4(new TextRender('Processing Error')),                new H4(new TextRender('Your card could not be identified.'))            );            $render->Render();        }        return false;    }    return true;}function create_transaction($paid) {    $transaction = $_SESSION[checkout_payment::$current_transaction_id];    if (!$transaction) {        $newinvoice    = get_next_invoice();        $name = array(            'post_title' => $newinvoice,            'post_status' => 'publish',            'post_author' => 1,            'post_category' => array(                1            ),            'post_type' => 'transactions'        );        $transaction = wp_insert_post($name);        transaction_properties::set_id($transaction, $newinvoice);        $_SESSION[checkout_payment::$current_transaction_id] = $transaction;    }    if (checkout_payment::GetTotalAmountPaid() > get_total()) {        $refund = checkout_payment::GetTotalAmountPaid() - get_total();        checkout_payment::SetRefund($refund);    }    transaction_properties::set_customer_name($transaction, checkout_payment::GetName());    transaction_properties::set_customer_email($transaction, checkout_payment::GetEmail());    transaction_properties::set_customer_address($transaction, "Conference Sale");    transaction_properties::set_taxrate($transaction, str_replace('$', '', get_option('ctaxrate') / 100));    transaction_properties::set_date($transaction, date('Y-m-d'));    if (checkout_payment::GetTotalAmountPaid() >= get_total()) {        transaction_properties::set_books($transaction, checkout_cart::GetCart());        transaction_properties::set_credits($transaction, checkout_cart::GetCredit());        $cart = checkout_cart::GetCart();        foreach ($cart as $key => $value) {            $quantity = $value[checkout_cart::$cart_book_quantity];            $book_id = $key;            for ($i = 0; $i < $quantity; $i++) {                book_properties::sell_book($book_id);            }        }    }    $paymentType = checkout_payment::GetPaymentType();    if ($paymentType != checkout_payment::$payment_credit) {        transaction_properties::add_payment($transaction, $paymentType, $paid);    }    else if ($_REQUEST['USER1'] == "credit") {        $transid = $_REQUEST['TransID'];        transaction_properties::add_payment_credit($transaction, $paymentType, $paid, $transid);    }}function print_formatting() {    ?>    <div style="display: none;">        <div id="toPrint">            <p style="text-align: center;"><strong>Home Works for Books</strong><br>                <em>Your homeschool connection for discounted new and used homeschool materials!</em></p>            <p style="text-align: center;"><?php                echo get_option('invoiceaddress');                ?><br>                <strong>Phone:</strong> <?php                echo get_option('invoicephone');                ?><br>                Come visit us online at <?php                echo get_option('invoiceURL');                ?></p>            <p>&nbsp;</p>            <table border="0" cellpadding="0" cellspacing="0" width="100%">                <tr>                    <td align="left" colspan="3" valign="top"><?php                        echo date("Y/m/d H:i:s");                        ?></td>                </tr>                <tr>                    <td align="left" colspan="3" valign="top"><?php                        global $current_user;                        get_currentuserinfo();                        ?>Cashier: <?php                        echo $current_user->user_firstname;                        ?></td>                </tr>                <tr>                    <td align="left" colspan="3" valign="middle">                        <hr>                    </td>                </tr><?php                foreach ($_SESSION['cart'] as $product => $qty):                    $row = get_post($product);                    $price = get_post_meta($product, '_cmb_resource_price', true);                    $amount = str_replace("$", "", $price);                    $line_cost = $amount * $qty;                    $total += get_post_meta($product, '_cmb_resource_price', true) * $qty;                    $taxpercent = get_option('ctaxrate') / 100;                    $tax = number_format($taxpercent * $total, 2);                    $credit = number_format($_SESSION['credit'], 2);                    $order = number_format($total - $credit, 2);                    $cost = number_format($total + $tax - $credit, 2);                    ?>                    <tr>                    <td align="left" colspan="2" valign="top">(<?php                        echo $qty;                        ?> ) <?php                        echo $row->post_title;                        ?></td>                    <td valign="top" width="15%">$<?php                        echo number_format($line_cost, 2);                        ?></td>                    </tr><?php                endforeach;                ?>                <tr>                    <td align="left" colspan="3" valign="middle">                        <hr>                    </td>                </tr>                <tr>                    <td valign="top">&nbsp;</td>                    <td align="right" valign="top" width="10%"><strong>Subtotal:</strong>&nbsp;&nbsp;</td>                    <td valign="top"><strong>$<?php                            echo number_format($total, 2);                            ?></strong></td>                </tr>                <tr>                    <td valign="top">&nbsp;</td>                    <td align="right" valign="top" width="10%">Credit:&nbsp;&nbsp;</td>                    <td valign="top">$<?php                        echo number_format($credit, 2);                        ?></td>                </tr>                <tr>                    <td valign="top">&nbsp;</td>                    <td align="right" valign="top" width="10%">Tax:&nbsp;&nbsp;</td>                    <td valign="top">$<?php                        echo $tax;                        ?></td>                </tr>                <tr>                    <td valign="top">&nbsp;</td>                    <td align="right" valign="top" width="10%">                        <hr>                    </td>                    <td valign="top">                        <hr>                    </td>                </tr>                <tr>                    <td valign="top">&nbsp;</td>                    <td align="right" valign="top" width="10%"><strong>TOTAL:</strong>&nbsp;&nbsp;</td>                    <td valign="top"><strong>$<?php                            echo $cost;                            ?></strong></td>                </tr><?php                $paytype = $_REQUEST['paytype'];                if ($paytype == "credit" or $_REQUEST['USER1'] == "credit") {                } else {                    ?>                    <tr>                    <td valign="top">&nbsp;</td>                    <td align="right" valign="top" width="10%"><span style="text-transform: uppercase;"><?php                            echo $paytype;                            ?>:</span>&nbsp;&nbsp;</td>                    <td valign="top">$<?php                        echo $_REQUEST['payment'];                        ?></td>                    </tr><?php                }                ?>                <tr>                    <td valign="top">&nbsp;</td>                    <td align="right" valign="top" width="10%">Change:&nbsp;&nbsp;</td>                    <td valign="top">$<?php                        echo $refund;                        ?></td>                </tr>            </table>            <p style="text-align: center;"><?php                echo get_option('invoicepromo');                ?></p>            <p style="text-align: center;"><strong>Invoice:</strong> #<?php                echo $invoice;                ?><br>                Customer Copy</p>        </div>    </div>    <table border="0" cellpadding="0" cellspacing="0" width="100%">        <tr>            <td align="left" valign="top"><input class="button-primary" onclick="printContent('toPrint');"                                                 type="button" value="Print invoice">&nbsp;&nbsp;&nbsp;</td>            <td align="left" valign="top">                <form action="%3C?php%20echo%20admin_url('admin.php?page=conference-sales',%20'https');%20?%3E"                      id="clear" method="post" name="clear">                    <input name="product_id" type="hidden" value="null"> <input name="action" type="hidden"                                                                                value="empty"> <input                        class="button-primary" type="submit" value="New order">                </form>            </td>        </tr>    </table>    <?php}function get_customer_credit_info() {    $list = new RenderList(        new Div(id(checkout_payment::$display_credit).classType('desc').style('display: none; margin-left: 25px;'),            new Form(id('TRANSFIRST').action('').name('creditform'),                new TableArr(id('formtable').width(100).border(0).cellspacing(0).cellpadding(0),                    new Row(                        new Column(),                        new Column(new Input(id('swipe').type('text').value("").placeholder('Swipe card &hellip;')))                    ),                    new Row(                        new Column(align('right'),                            new Input(type('hidden').name('TrackData').id('TrackData')),                            new Label(forAttr(checkout_payment::$name), new TextRender('Name on Card:'))                        ),                        new Column(                            new Input(type('text').id(checkout_payment::$name).name(checkout_payment::$name).onclick('setFromCCS()'))                        )                    ),                    new Row(                        new Column(align('right'), new Label(forAttr(checkout_payment::$email), new TextRender('Email Address:'))),                        new Column(checkout_payment::InputEmail())                    ),                    new Row(                        new Column(align('right'), new Label(forAttr(checkout_payment::$card_number), new TextRender('Credit Card #:'))),                        new Column(checkout_payment::InputCardNumber())                    ),                    new Row(                        new Column(align('right'), new Label(forAttr(checkout_payment::$card_expiration_month), new TextRender('Expires:'))),                        new Column(                            new Input(type('text').name(checkout_payment::$card_expiration_month).id(checkout_payment::$card_expiration_month).maxlength(2).size(2).placeholder(date('m'))),                            new Input(type('text').name(checkout_payment::$card_expiration_year).id(checkout_payment::$card_expiration_year).maxlength(2).size(2).placeholder(substr(date('Y'), -2)))                        )                    ),                    new Row(                        new Column(align('right'), new Label(forAttr(checkout_payment::$card_verification), new TextRender('Verification #:'))),                        new Column(                            new Input(type('text').name(checkout_payment::$card_verification).maxlength(4).size(4))                        )                    ),                    new Row(                        new Column(align('right'), new Label(forAttr(checkout_payment::$address), new TextRender('Address:'))),                        new Column(checkout_payment::InputAddress())                    ),                    new Row(                        new Column(align('right'), new Label(forAttr(checkout_payment::$city), new TextRender('City:'))),                        new Column(checkout_payment::InputCity())                    ),                    new Row(                        new Column(align('right'), new Label(forAttr(checkout_payment::$state), new TextRender('State:'))),                        new Column(new TextRender(state_select()))                    ),                    new Row(                        new Column(align('right'), new Label(forAttr(checkout_payment::$zip), new TextRender('Zip:'))),                        new Column(checkout_payment::InputZip())                    ),                    new Row(                        new Column(align('right'), new Label(forAttr(checkout_payment::$amount_paid), new TextRender('Amount:'))),                        new Column(checkout_payment::InputAmountPaid())                    ),                    new Row(                        new Column(),                        new Column(align('center'),                            page_action::InputAction(action_types::$pre_card_submission),                            new Input(id(checkout_payment::$payment_type).name(checkout_payment::$payment_type).value(checkout_payment::$payment_credit).type('hidden')),                            new Input(classType('button-primary').type('submit').value('Continue'))                        )                    )                )            )        )    );    return $list;}function get_customer_check_info() {    $div = new Div(id(checkout_payment::$display_check).classType('desc').style('display: none;'),        new Form(            new TableArr(                new Row(                    new Column(align('right'),                        new Input(type('hidden').name(checkout_payment::$payment_type).value(checkout_payment::$payment_check)),                        new Label(forAttr(checkout_payment::$name), new TextRender('Name on Check:'))                    ),                    new Column(checkout_payment::InputName())                ),                new Row(                    new Column(align('right'), new Label(forAttr(checkout_payment::$email), new TextRender('Email Address:'))),                    new Column(                        checkout_payment::InputEmail(),                        page_action::InputAction(action_types::$process_payment)                    )                ),                new Row(                    new Column(align('right'),                        new Label(forAttr(checkout_payment::$amount_paid), new TextRender('Amount:'))                    ),                    new Column(checkout_payment::InputAmountPaid())                ),                new Row(                    new Column(),                    new Column(align('right'),                        button('Check Payment')                    )                )            )        )    );    return $div;}function get_customer_cash_info() {    $div = new Div(id(checkout_payment::$display_cash).classType('desc').style('display: none;'),        new Form(            new TableArr(                new Row(                    new Column(align('right'),                        new Input(type('hidden').name(checkout_payment::$payment_type).value(checkout_payment::$payment_cash)),                        new Label(forAttr(checkout_payment::$name), new TextRender('Customer Name:'))                    ),                    new Column(checkout_payment::InputName())                ),                new Row(                    new Column(align('right'), new Label(forAttr(checkout_payment::$email), new TextRender('Email Address:'))),                    new Column(                        checkout_payment::InputEmail(),                        page_action::InputAction(action_types::$process_payment)                    )                ),                new Row(                    new Column(align('right'),                        new Label(forAttr(checkout_payment::$amount_paid), new TextRender('Amount:'))                    ),                    new Column(checkout_payment::InputAmountPaid())                ),                new Row(                    new Column(),                    new Column(align('right'),                        button('Cash Payment')                    )                )            )        )    );    return $div;}function get_customer_phone_info() {    $div = new Div(id(checkout_payment::$display_phone).classType('desc').style('display: none;'),        new Form(            new TableArr(                new Row(                    new Column(align('right'),                        new Input(type('hidden').name(checkout_payment::$payment_type).value(checkout_payment::$payment_phone)),                        new Label(forAttr(checkout_payment::$name), new TextRender('Customer Name:'))                    ),                    new Column(checkout_payment::InputName())                ),                new Row(                    new Column(align('right'), new Label(forAttr(checkout_payment::$email), new TextRender('Email Address:'))),                    new Column(                        checkout_payment::InputEmail(),                        page_action::InputAction(action_types::$process_payment)                    )                ),                new Row(                    new Column(align('right'),                        new Label(forAttr(checkout_payment::$amount_paid), new TextRender('Amount:'))                    ),                    new Column(checkout_payment::InputAmountPaid())                ),                new Row(                    new Column(),                    new Column(align('right'),                        button('Phone Payment')                    )                )            )        )    );    return $div;}function insert_scripts() {    ?>    <script type="text/javascript">        jQuery(document).ready(            function () {                jQuery("#payment_credit").click(function () {                    jQuery(".desc").hide();                    jQuery("#display_credit").show();                });                jQuery("#payment_check").click(function () {                    jQuery(".desc").hide();                    jQuery("#display_check").show();                });                jQuery("#payment_cash").click(function () {                    jQuery(".desc").hide();                    jQuery("#display_cash").show();                });                jQuery("#payment_phone").click(function () {                    jQuery(".desc").hide();                    jQuery("#display_phone").show();                });            }        );    </script>    <script type="text/javascript">        function setFromCCS() {            document.getElementById("swipe").blur(function (e) {                e.preventDefault();            });            var ccs = document.getElementById("swipe").value;            var index1 = ccs.indexOf("%B") + 2;            var index2 = ccs.indexOf("^") + 1;            var index3 = ccs.indexOf("^", index2 + 1) + 1;            var cardNumber = ccs.substring(index1, index2 - 1);            var expMonth = ccs.substr(index3, 2);            var expYear = ccs.substr(index3 + 2, 2);            var holderName = ccs.substring(index2, index3 - 1);            var index4 = holderName.indexOf("/");            var temp1 = holderName.substring(0, index4);            var temp2 = holderName.substring(index4 + 1);            holderName = temp2 + ' ' + temp1;            document.getElementById("swipe").style.display = "none";            document.getElementById("ch").value = holderName;            document.getElementById("cn").value = cardNumber;            document.getElementById("cm").value = expMonth;            document.getElementById("cy").value = expYear;        }        ;    </script>    <?php}function get_books_and_credit() {    return new TableArr(border(0).cellpadding(0).cellspacing(0).width(100), //left side of page table (add item, credit, book display)        new Row(            new Column(                get_add_boxes()            )        ),        new Row(            new Column(                get_current_books()            )        ),        new Row(            new Column(                get_totals()            )        )    );}function get_add_boxes() {    return new TableArr(border(0).cellpadding(0).cellspacing(0), //top of left side table, add item and credit        new Row(            new Column(width(30), get_add_item_box()),            new Column(width(65)),            new Column(width(15).align('right'), get_credit_box())        )    );}function get_add_item_box() {    return new TableArr(style('padding: 10px; border: solid; border-width: 1px; border-color: #D0D0D0;'),        new Form(id('cart').name('cart'),            new Row(                new Column(align('right'),                    new H4(style('margin: 0px;'),new TextRender('Scan:'))),                new Column()            ),            new Row(                new Column(align('right'), new Label(new TextRender('ID:'))),                new Column(new Input(id(checkout_request::$barcode).name(checkout_request::$barcode).type('text')))            ),            new Row(                new Column(align('right'), new Label(new TextRender('ISBN:'))),                new Column(new Input(id(checkout_request::$isbn).name(checkout_request::$isbn).type('text')))            ),            new Row(                new Column(align('right')                ),                new Column(align('right'),                    new Input(name(checkout_request::$quantity).type('hidden').value(1)),                    page_action::InputAction(action_types::$add_item_checkout),                    button('Add Item')                )            )        )    );}function get_current_books() {    $table = new TableArr(width(100).border(0).cellspacing(0).cellpadding(0));    if (checkout_cart::GetCart()) {        $cart = checkout_cart::GetCart();        $renderlist = new RenderList(            new Row(                new Column(style('padding-top: 20px; padding-bottom: 3px;').width(checkout_width_constants::$bookTitleWidth).align('left'),                    new H4(style('margin: 0px; font-size: 14px;'), new TextRender('Books'))),                new Column(style('padding-top: 20px; padding-bottom: 3px;').width(checkout_width_constants::$bookQuantityWith).align('center'),                    new H4(style('margin: 0px; font-size: 14px;'), new TextRender('Quantity'))),                new Column(style('padding-top: 20px; padding-bottom: 3px;').width(checkout_width_constants::$bookPriceWidth).align('left'),                    new H4(style('margin: 0px; font-size: 14px;'), new TextRender('Price'))),                new Column(width(checkout_width_constants::$bookExtraWidth))            ),            new Row(style('border: none; padding: 0px; height: 1px;'),                new Column(colspan(10).style('padding-bottom: 8px; border-top: solid; border-width: 3px; border-color: #B0B0B0;'))            )        );        $table->add_object($renderlist);        $first = true;        foreach ($cart as $key => $value) {            if (!$first) {                $table->add_object(                    new Row(style('border: none; padding: 0px; height: 1px;'),                        new Column(colspan(10).style('padding-bottom: 0px; padding-top: 3px; border-bottom: solid; border-width: 1px; border-color: #F0F0F0;'))                    )                );                $table->add_object(                    new Row(style('border: none; padding: 0px; height: 1px;'),                        new Column(colspan(10).style('padding-bottom: 2px; padding-top: 0px;'))                    )                );            }            $table->add_object(display_cart_book($value));            $first = false;        }    }    //display hr gap    if (checkout_cart::GetCredit()) {        $credit = checkout_cart::GetCredit();        $renderlist = new RenderList(            new Row(                new Column(style('padding-top: 20px; padding-bottom: 3px;').width(checkout_width_constants::$bookTitleWidth).align('left'),                    new H4(style('margin: 0px; font-size: 14px;'), new TextRender('Credits'))),                new Column(style('padding-top: 20px; padding-bottom: 3px;').width(checkout_width_constants::$bookQuantityWith).align('center'),                    new H4(style('margin: 0px; font-size: 14px;'), new TextRender(''))),                new Column(style('padding-top: 20px; padding-bottom: 3px;').width(checkout_width_constants::$bookPriceWidth).align('left'),                    new H4(style('margin: 0px; font-size: 14px;'), new TextRender('Amount'))),                new Column(style('padding-top: 20px; padding-bottom: 3px;').width(checkout_width_constants::$bookExtraWidth).align('center'),                    new H4(style('margin: 0px;'), new TextRender(''))),                new Column(width(30))            ),            new Row(style('border: none; padding: 0px; height: 1px;'),                new Column(colspan(10).style('padding-bottom: 4px; border-top: solid; border-width: 3px; border-color: #B0B0B0;'))            )        );        $table->add_object($renderlist);        //match categories of the books        $first = true;        foreach ($credit as $key => $value) {            if (!$first) {                $table->add_object(                    new Row(style('border: none; padding: 0px; height: 1px;'),                        new Column(colspan(10).style('padding-bottom: 0px; padding-top: 3px; border-bottom: solid; border-width: 1px; border-color: #F0F0F0;'))                    )                );                $table->add_object(                    new Row(style('border: none; padding: 0px; height: 1px;'),                        new Column(colspan(10).style('padding-bottom: 2px; padding-top: 0px;'))                    )                );            }            $table->add_object(display_credit_value($key, $value));            $first = false;        }    }    return $table;}function get_totals() {    $table = new TableArr(width(100).border(0).cellspacing(0).cellpadding(0));    if (checkout_cart::GetCart() || checkout_cart::GetCredit()) {        $renderlist = new RenderList(            new Row(                new Column(width(checkout_width_constants::$bookTitleWidth).style('padding-top: 20px;')),                new Column(width(checkout_width_constants::$bookQuantityWith - 1).align('right').style('padding-top: 20px;')),                new Column(width(1).style('padding-top: 20px;')),                new Column(width(8).align('left').style('padding-top: 20px;'),                    new H4(style('margin: 0px; font-size: 14px;'), new TextRender('Total'))),                new Column()            ),            new Row(style('border: none; padding: 0px; height: 1px;'),                new Column(colspan(5).style('padding-bottom: 8px; border-top: solid; border-width: 3px; border-color: #B0B0B0;'))            ),            new Row(                new Column(width(checkout_width_constants::$bookTitleWidth)),                new Column(width(checkout_width_constants::$bookQuantityWith - 1).align('right').style('font-weight: bold;'),                    new TextRender('Subtotal:')),                new Column(width(1)),                new Column(width(8).align('left'),                    new TextRender('$'.number_format(get_subtotal(), 2))),                new Column()            ),            new Row(                new Column(width(checkout_width_constants::$bookTitleWidth)),                new Column(width(checkout_width_constants::$bookQuantityWith - 1).align('right').style('font-weight: bold;'),                    new TextRender('Credit:')),                new Column(width(1)),                new Column(width(8).align('left'),                    new TextRender('$'.number_format(get_credit_total(), 2))),                new Column()            ),            new Row(                new Column(width(checkout_width_constants::$bookTitleWidth)),                new Column(width(checkout_width_constants::$bookQuantityWith - 1).align('right').style('font-weight: bold;'),                    new TextRender('Tax:')),                new Column(width(1)),                new Column(width(8).align('left'),                    new TextRender('$'.number_format(get_tax_total(), 2))),                new Column(align('left'),                    new TextRender('&#x2190 '.(number_format(get_tax_percent()* 100, 3)).'% applied.'))            ),            new Row(                new Column(width(checkout_width_constants::$bookTitleWidth)),                new Column(width(checkout_width_constants::$bookQuantityWith - 1)),                new Column(width(1).style('padding-bottom: 8px; border-top: solid; border-width: 1px; border-color: #D0D0D0;')),                new Column(width(8).style('padding-bottom: 8px; border-top: solid; border-width: 1px; border-color: #D0D0D0;')),                new Column(style('padding-bottom: 8px; border-top: solid; border-width: 1px; border-color: #D0D0D0;'))            ),            new Row(                new Column(width(checkout_width_constants::$bookTitleWidth)),                new Column(width(checkout_width_constants::$bookQuantityWith - 1).align('right').style('font-weight: bold;'),                    new TextRender('Total:')),                new Column(width(1)),                new Column(width(8).align('left'),                    new TextRender('$'.number_format(get_total(), 2))),                new Column(align('left'),                    new Form(                        page_action::InputAction(action_types::$clear_checkout_cart),                        new Input(classType('button').type('submit').name('button').value('Clear Cart'))                    )                )            )        );        $table->add_object($renderlist);    }    return $table;}function display_cart_book($bookArr) {    $book_id = $bookArr[checkout_cart::$cart_book_id];    $book_quantity = $bookArr[checkout_cart::$cart_book_quantity];    $row = new Row(        new Column(style('font-weight: bold;').align('left'),            new TextRender(book_properties::get_book_title($book_id))        ), //name        new Column(align('center'),            new Label(style('font-weight: bold; padding-right: 8px;'), new TextRender($book_quantity)),            new Form(style('display: inline-block; padding-right: 3px;'),                page_action::InputAction(action_types::$remove_item_checkout),                selection::InputBook($book_id),                new Input(id(checkout_request::$remove_amount).name(checkout_request::$remove_amount).type('hidden').value(1)),                new Input(classType('button').style('padding: 0px 6px 0px; font-size: 20px; line-height: 11px; height: 22px;                    color: #787878;                    border-color: #D8D8D8;                    background: #F8F8F8;                    box-shadow: 0 1px 0 #D8D8D8;').type('submit').name('button').value('-'))            ),            new Form(style('display: inline-block; padding-left: 3px;'),                page_action::InputAction(action_types::$remove_item_checkout),                selection::InputBook($book_id),                new Input(id(checkout_request::$remove_amount).name(checkout_request::$remove_amount).type('hidden').value('all')),                new Input(classType('button').style('padding: 0px 6px 0px; font-size: 14px; line-height: 11px; height: 22px;                    color: #787878;                    border-color: #D8D8D8;                    background: #F8F8F8;                    box-shadow: 0 1px 0 #D8D8D8;').type('submit').name('button').value('X'))            )        ), //quantity        new Column(align('left'),            new TextRender('$'.number_format($book_quantity * book_properties::get_book_saleprice($book_id), 2))        ) //price    );    return $row;}function display_credit_value($index, $credit) {    $credit_name = $credit[checkout_cart::$credit_name];    $credit_amount = $credit[checkout_cart::$credit_amount];    $row = new Row(        new Column(style('font-weight: bold;').align('left'),            new TextRender($credit_name)        ), //name        new Column(align('center'),            new Form(                page_action::InputAction(action_types::$remove_credit_checkout),                new Input(id(checkout_request::$remove_credit_index).name(checkout_request::$remove_credit_index).type('hidden').value($index)),                new Input(classType('button').style('padding: 0px 6px 0px; font-size: 14px; line-height: 11px; height: 22px;                    color: #787878;                    border-color: #D8D8D8;                    background: #F8F8F8;                    box-shadow: 0 1px 0 #D8D8D8;').type('submit').name('button').value('X'))            )        ),        new Column(align('left'),            new TextRender('-$'.number_format($credit_amount, 2))        )    );    return $row;}function get_credit_box() {    $form_clear = new Form(id('clear_credit').name('clear_credit'));    $form_add = new Form(id('add_credit').name('add_credit'));    $table = new    RenderList(        $form_add,        $form_clear,        new TableArr(style('padding: 10px; border: solid; border-width: 1px; border-color: #D0D0D0;'),            new Form(id('credit').name('credit'),                new Row(                    new Column(new H4(style('margin: 0px;'), new TextRender('Discount:')))                ),                new Row(                    new Column(align('right').width(20), new TextRender('Name:')),                    new Column(new Input(form('add_credit').id(checkout_request::$credit_name).name(checkout_request::$credit_name).type('text')))                ),                new Row(                    new Column(align('right').width(20), new TextRender('Amount:')),                    new Column(new Input(form('add_credit').id(checkout_request::$credit_amount).name(checkout_request::$credit_amount).type('text')))                ),                new Row(                    new Column(width(20).style('padding-top: 5px;').align('left'),                        new Input(form('clear_credit').id(page_action::$action).name(page_action::$action).type('hidden').value(action_types::$clear_checkout_credit)),                        new Input(form('clear_credit').classType('button').type('submit').name('button').value('Clear Credit'))                    ),                    new Column(align('right').style('padding-top: 5px;'),                        new Input(form('add_credit').id(page_action::$action).name(page_action::$action).type('hidden').value(action_types::$add_credit_checkout)),                        new Input(form('add_credit').classType('button-primary').type('submit').name('button').value('Add Credit'))                    )                )            )        )    );    return $table;}function get_total() {    return get_subtotal() + get_tax_total();}function get_subtotal() {    $total = 0;    $cart = checkout_cart::GetCart();    if ($cart) {        foreach ($cart as $key => $value) {            $price = book_properties::get_book_saleprice($value[checkout_cart::$cart_book_id]);            $quantity = $value[checkout_cart::$cart_book_quantity];            $total = $total + $price * $quantity;        }    }    return $total - get_credit_total();}function get_credit_total() {    $total = 0;    $credit = checkout_cart::GetCredit();    if ($credit) {        foreach ($credit as $key => $value) {            $amount = $value[checkout_cart::$credit_amount];            $total = $total + $amount;        }    }    return $total;}function get_tax_total() {    $taxpercent = get_tax_percent();    $subtotal = get_subtotal();    return $subtotal * $taxpercent;}function get_paid_amount_tax_total() {    $taxpercent = get_tax_percent();    $subtotal = checkout_payment::GetAmountPaid();    return $subtotal * $taxpercent;}function get_tax_percent() {    return str_replace('$', '', get_option('ctaxrate') / 100);}function get_next_invoice() {    $lastInvoice = get_option('_cmb_transaction_transaction_id') + 1;    update_option('_cmb_transaction_transaction_id', $lastInvoice);    return $lastInvoice;}function state_select() {    return '    <select name="AVSSTATE">        <option selected="selected" value="">        </option>        <option value="AL">            AL        </option>        <option value="AK">            AK        </option>        <option value="AZ">            AZ        </option>        <option value="AR">            AR        </option>        <option value="CA">            CA        </option>        <option value="CO">            CO        </option>        <option value="CT">            CT        </option>        <option value="DE">            DE        </option>        <option value="DC">            DC        </option>        <option value="FL">            FL        </option>        <option value="GA">            GA        </option>        <option value="HI">            HI        </option>        <option value="ID">            ID        </option>        <option value="IL">            IL        </option>        <option value="IN">            IN        </option>        <option value="IA">            IA        </option>        <option value="KS">            KS        </option>        <option value="KY">            KY        </option>        <option value="LA">            LA        </option>        <option value="ME">            ME        </option>        <option value="MD">            MD        </option>        <option value="MA">            MA        </option>        <option value="MI">            MI        </option>        <option value="MN">            MN        </option>        <option value="MS">            MS        </option>        <option value="MO">            MO        </option>        <option value="MT">            MT        </option>        <option value="NE">            NE        </option>        <option value="NV">            NV        </option>        <option value="NH">            NH        </option>        <option value="NJ">            NJ        </option>        <option value="NM">            NM        </option>        <option value="NY">            NY        </option>        <option value="NC">            NC        </option>        <option value="ND">            ND        </option>        <option value="OH">            OH        </option>        <option value="OK">            OK        </option>        <option value="OR">            OR        </option>        <option value="PA">            PA        </option>        <option value="RI">            RI        </option>        <option value="SC">            SC        </option>        <option value="SD">            SD        </option>        <option value="TN">            TN        </option>        <option value="TX">            TX        </option>        <option value="UT">            UT        </option>        <option value="VT">            VT        </option>        <option value="VA">            VA        </option>        <option value="WA">            WA        </option>        <option value="WV">            WV        </option>        <option value="WI">            WI        </option>        <option value="WY">            WY        </option>    </select>';}?>